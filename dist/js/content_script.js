(()=>{"use strict";var __webpack_modules__={723:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function processElement(element,recipe,parentName="",nthChild=0){let tagName=recipe.tag_name||element.tagName.toLowerCase();tagName.endsWith("_")&&(tagName=tagName.slice(0,-1));const newElement=document.createElement(tagName);let elementText="";if(recipe.text_selector){const e=element.querySelector(recipe.text_selector);e&&(elementText=e.innerText||e.textContent||"")}else recipe.text_js?elementText=eval(recipe.text_js):recipe.add_text&&(elementText=element.innerText||element.textContent||"");elementText=elementText.replace(/\s+/g," ").trim(),recipe.text_format&&elementText&&(elementText=recipe.text_format.replace("{}",elementText)),elementText&&recipe.add_text&&(newElement.textContent=elementText);let elementName="";if(recipe.name&&("from_text"===recipe.name?(elementName=parentName?parentName+".":"",elementName+=elementText.toLowerCase().replace(/[^\w]+/g,"_")):"from_nth_child"===recipe.name?(elementName=parentName?parentName+".":"",elementName+=nthChild.toString()):(elementName=parentName?parentName+".":"",elementName+=recipe.name),newElement.setAttribute("name",elementName),parentName=elementName),recipe.clickable){if(!recipe.name)throw new Error("clickable element must have a name");let e;e=recipe.click_selector?element.querySelector(recipe.click_selector):element,e?e.setAttribute("data-clickable-id",elementName):console.log("click-element not found",element,recipe),window.clickable_recipes||(window.clickable_recipes={}),window.clickable_recipes[elementName]=recipe}if("input"===tagName){const e=element.getAttribute("type");["text","number"].includes(e)?(newElement.setAttribute("value",element.value),element.setAttribute("data-input-id",elementName)):"checkbox"===e?newElement.setAttribute("checked",element.checked.toString()):"radio"===e&&(newElement.setAttribute("checked",element.checked.toString()),element.setAttribute("data-clickable-id",elementName)),window.input_recipes||(window.input_recipes={}),window.input_recipes[elementName]=recipe}if("select"===tagName){element.setAttribute("data-select-id",elementName);const e=element.querySelectorAll("option");e.forEach((e=>{const t=e.getAttribute("value")||e.textContent.trim(),n=elementName+"."+t,r=document.createElement("option");r.textContent=e.textContent,r.setAttribute("value",t),r.setAttribute("name",n),r.setAttribute("selected",e.selected.toString()),e.setAttribute("data-clickable-id",n),newElement.appendChild(r)}))}const attrsToCopy=["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"];if(attrsToCopy.forEach((e=>{const t=element.getAttribute(e);t&&newElement.setAttribute(e,t)})),recipe.keep_attr)for(const e in recipe.keep_attr){const t=element.getAttribute(e);t&&newElement.setAttribute(e,t)}if(recipe.class&&newElement.setAttribute("class",recipe.class),recipe.id&&newElement.setAttribute("id",recipe.id),recipe.override_attr)for(const key in recipe.override_attr)newElement.setAttribute(key,eval(recipe.override_attr[key]));if(recipe.children&&recipe.children.length>0)for(const e of recipe.children){const t=e.direct_child?`:scope > ${e.selector}`:e.selector,n=element.querySelectorAll(t);n.forEach(((t,n)=>{const r=processElement(t,e,parentName,n);if(newElement.appendChild(r),e.insert_split_marker&&n%(e.insert_split_marker_every||1)==0){const e=document.createElement("split-marker");newElement.appendChild(e)}if(e.insert_split_marker){const e=document.createElement("split-marker");newElement.appendChild(e)}else console.log("no split marker")}))}if(recipe.empty_message&&0===newElement.children.length){const e=document.createTextNode(recipe.empty_message);newElement.appendChild(e)}return newElement}__webpack_require__.d(__webpack_exports__,{q:()=>processElement})}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={},_utils_element_processor__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(723),__awaiter=function(e,t,n,r){return new(n||(n=Promise))((function(o,c){function i(e){try{a(r.next(e))}catch(e){c(e)}}function l(e){try{a(r.throw(e))}catch(e){c(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,l)}a((r=r.apply(e,t||[])).next())}))};let lastScrollTime=0;const SCROLL_THRESHOLD=1500;function generateHtmlSnapshotId(){const e=window.location.href,t=(new Date).toISOString();return`html_${hashCode(e)}_${t}`}function hashCode(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return console.log("Hash value before return:",t),t.toString()}function getClickableElementsInViewport(){const e=[];return document.querySelectorAll('a, button, [onclick], input[type="button"], input[type="submit"]').forEach((t=>{const n=t.getBoundingClientRect();n.top>=0&&n.left>=0&&n.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&n.right<=(window.innerWidth||document.documentElement.clientWidth)&&e.push({tagName:t.tagName,className:t.className,id:t.id,innerText:t.innerText.trim(),outerHTML:t.outerHTML.trim()})})),e}function captureInteraction(e,t,n,r,o,c){return __awaiter(this,void 0,void 0,(function*(){try{const i=generateHtmlSnapshotId();yield new Promise(((e,t)=>{chrome.storage.local.get(["htmlSnapshots"],(n=>{const r=n.htmlSnapshots||{};r[i]=document.documentElement.outerHTML,chrome.storage.local.set({htmlSnapshots:r},(()=>{chrome.runtime.lastError?t(chrome.runtime.lastError):e(void 0)}))}))}));const l={eventType:e,timestamp:n,target:t,targetOuterHTML:t.outerHTML,targetClass:t.className,targetId:t.id,targetText:t.innerText||t.value||"",htmlSnapshotId:i,selector:r||"",clickableId:o||"",url:c||""};yield chrome.runtime.sendMessage({action:"saveData",data:l})}catch(t){console.error(`Error during ${e} event handling:`,t)}}))}function getUniqueSelector(e){if(e.id)return`#${e.id}`;if(e.className){const t=e.className.trim().split(/\s+/).join(".");return`${e.tagName.toLowerCase()}.${t}`}return e.tagName.toLowerCase()}function getFullSelector(e){let t=[];for(;e.parentElement;)t.unshift(getUniqueSelector(e)),e=e.parentElement;return t.join(" > ")}function captureScreenshot(e){return __awaiter(this,void 0,void 0,(function*(){try{const t=`screenshot_${e}`;yield chrome.runtime.sendMessage({action:"captureScreenshot",screenshotId:t})}catch(e){console.error("Error capturing screenshot:",e)}}))}document.addEventListener("DOMContentLoaded",(()=>__awaiter(void 0,void 0,void 0,(function*(){console.log("DOMContentLoaded");const e=window.location.href;try{const t=yield new Promise((t=>{chrome.runtime.sendMessage({action:"getRecipe",url:e},t)}));if(console.log("response"),t&&t.recipe){const e=t.recipe,n=document.querySelector(e.selector);if(n){const t=(0,_utils_element_processor__WEBPACK_IMPORTED_MODULE_0__.q)(n,e);console.log(t.outerHTML)}}}catch(e){console.error("Error initializing clickable elements:",e)}try{const t=(new Date).toISOString();captureScreenshot(t),captureInteraction("navigate","",t,"","",e)}catch(e){console.error("Error capturing screenshot:",e)}})))),document.addEventListener("scroll",(e=>__awaiter(void 0,void 0,void 0,(function*(){try{const t=Date.now();if(t-lastScrollTime>=SCROLL_THRESHOLD){lastScrollTime=t;const n=(new Date).toISOString();yield captureInteraction("scroll",e.target,n,"","",""),yield captureScreenshot(n)}}catch(e){console.error("Error during scroll event handling:",e)}})))),document.addEventListener("blur",(e=>__awaiter(void 0,void 0,void 0,(function*(){if(e.target&&"INPUT"===e.target.tagName||"TEXTAREA"===e.target.tagName){const t=e.target,n=(new Date).toISOString();yield captureScreenshot(n),yield captureInteraction("input",t,n,"","","")}}))),!0),document.addEventListener("click",(e=>{try{function t(e,n=0){return!e||n>=2?null:e.hasAttribute("data-clickable-id")?e:t(e.parentElement,n+1)}const n=t(e.target),r=n&&n.getAttribute("data-clickable-id")||"";console.log("click");const o=(new Date).toISOString();console.log(o);const c=getFullSelector(e.target);console.log("srart screenshot"),captureScreenshot(o),console.log("end screenshot"),captureInteraction("click",e.target,o,c,r,""),console.log("end")}catch(i){console.error("Error during click event handling:",i)}})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelectorAll('input[id="placeOrder"], input[id="turbo-checkout-pyo-button"]');if(0===e.length)return void console.log("No Place Your Order buttons found!");const t=document.querySelectorAll(".lineitem-title-text"),n=[];t.forEach((e=>{var t;if(e.matches(".a-size-base.lineitem-title-text"))return void console.log("Skipping interfering element:",e.innerText);const r=e.innerText.trim(),o=null===(t=e.closest("div"))||void 0===t?void 0:t.querySelector(".lineitem-price-text"),c=o&&o.innerText?o.innerText.trim().replace("$",""):"0.00";n.push({name:r,price:parseFloat(c)})})),e.forEach((e=>{e.addEventListener("click",(e=>__awaiter(void 0,void 0,void 0,(function*(){console.log("Place Your Order button clicked!");let e=yield chrome.storage.local.get({orderDetails:[]});e=e.orderDetails||[];let t=e.concat(n);yield chrome.storage.local.set({orderDetails:t})}))))}))})),chrome.runtime.onMessage.addListener(((e,t,n)=>("getHTML"===e.action&&n({html:document.documentElement.outerHTML}),!0)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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VSxPQUFRLE9BQVEsR0FBUSxZQUMxRTNELFFBQVFDLElBQUksb0NBQ1osSUFBSXVFLFFBQWV5QyxPQUFPQyxRQUFRQyxNQUFNOUQsSUFBSSxDQUFFa0csYUFBYyxLQUM1RC9FLEVBQVNBLEVBQU8rRSxjQUFnQixHQUNoQyxJQUFJVyxFQUFvQjFGLEVBQU8yRixPQUFPWixTQUNoQ3RDLE9BQU9DLFFBQVFDLE1BQU1FLElBQUksQ0FBRWtDLGFBQWNXLEdBQ25ELEtBQUcsR0FDTCxJQUVOakQsT0FBT0ssUUFBUThDLFVBQVVDLGFBQVksQ0FBQ0MsRUFBU0MsRUFBUUMsS0FDNUIsWUFBbkJGLEVBQVF2QyxRQUVSeUMsRUFBYSxDQUFFQyxLQURLL0wsU0FBU3dILGdCQUFnQlEsYUFHMUMsSSIsInNvdXJjZXMiOlsid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vc3JjL3V0aWxzL2VsZW1lbnQtcHJvY2Vzc29yLnRzIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2Nocm9tZS1leHRlbnNpb24tdHlwZXNjcmlwdC1zdGFydGVyLy4vc3JjL2NvbnRlbnRfc2NyaXB0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzRWxlbWVudChlbGVtZW50LCByZWNpcGUsIHBhcmVudE5hbWUgPSBcIlwiLCBudGhDaGlsZCA9IDApIHtcbiAgICAvLyBDcmVhdGUgYSBuZXcgZWxlbWVudCB1c2luZyB0aGUgRE9NIEFQSVxuICAgIGxldCB0YWdOYW1lID0gcmVjaXBlLnRhZ19uYW1lIHx8IGVsZW1lbnQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIEhhbmRsZSB1bmRlcnNjb3JlZCB0YWdzXG4gICAgaWYgKHRhZ05hbWUuZW5kc1dpdGgoXCJfXCIpKSB7XG4gICAgICAgIHRhZ05hbWUgPSB0YWdOYW1lLnNsaWNlKDAsIC0xKTtcbiAgICB9XG4gICAgY29uc3QgbmV3RWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgLy8gRXh0cmFjdCB0ZXh0IGNvbnRlbnQgYmFzZWQgb24gdGhlIHJlY2lwZVxuICAgIGxldCBlbGVtZW50VGV4dCA9IFwiXCI7XG4gICAgaWYgKHJlY2lwZS50ZXh0X3NlbGVjdG9yKSB7XG4gICAgICAgIGNvbnN0IHRleHRFbGVtZW50ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKHJlY2lwZS50ZXh0X3NlbGVjdG9yKTtcbiAgICAgICAgaWYgKHRleHRFbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50VGV4dCA9IHRleHRFbGVtZW50LmlubmVyVGV4dCB8fCB0ZXh0RWxlbWVudC50ZXh0Q29udGVudCB8fCBcIlwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlY2lwZS50ZXh0X2pzKSB7XG4gICAgICAgIGVsZW1lbnRUZXh0ID0gZXZhbChyZWNpcGUudGV4dF9qcyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHJlY2lwZS5hZGRfdGV4dCkge1xuICAgICAgICBlbGVtZW50VGV4dCA9IGVsZW1lbnQuaW5uZXJUZXh0IHx8IGVsZW1lbnQudGV4dENvbnRlbnQgfHwgXCJcIjtcbiAgICB9XG4gICAgZWxlbWVudFRleHQgPSBlbGVtZW50VGV4dC5yZXBsYWNlKC9cXHMrL2csIFwiIFwiKS50cmltKCk7XG4gICAgaWYgKHJlY2lwZS50ZXh0X2Zvcm1hdCAmJiBlbGVtZW50VGV4dCkge1xuICAgICAgICBlbGVtZW50VGV4dCA9IHJlY2lwZS50ZXh0X2Zvcm1hdC5yZXBsYWNlKFwie31cIiwgZWxlbWVudFRleHQpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudFRleHQgJiYgcmVjaXBlLmFkZF90ZXh0KSB7XG4gICAgICAgIG5ld0VsZW1lbnQudGV4dENvbnRlbnQgPSBlbGVtZW50VGV4dDtcbiAgICB9XG4gICAgLy8gQnVpbGQgdGhlIG5vZGUgYXR0cmlidXRlc1xuICAgIGxldCBlbGVtZW50TmFtZSA9IFwiXCI7XG4gICAgaWYgKHJlY2lwZS5uYW1lKSB7XG4gICAgICAgIGlmIChyZWNpcGUubmFtZSA9PT0gXCJmcm9tX3RleHRcIikge1xuICAgICAgICAgICAgZWxlbWVudE5hbWUgPSBwYXJlbnROYW1lID8gcGFyZW50TmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgICAgIGVsZW1lbnROYW1lICs9IGVsZW1lbnRUZXh0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15cXHddKy9nLCBcIl9cIik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAocmVjaXBlLm5hbWUgPT09IFwiZnJvbV9udGhfY2hpbGRcIikge1xuICAgICAgICAgICAgZWxlbWVudE5hbWUgPSBwYXJlbnROYW1lID8gcGFyZW50TmFtZSArIFwiLlwiIDogXCJcIjtcbiAgICAgICAgICAgIGVsZW1lbnROYW1lICs9IG50aENoaWxkLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50TmFtZSA9IHBhcmVudE5hbWUgPyBwYXJlbnROYW1lICsgXCIuXCIgOiBcIlwiO1xuICAgICAgICAgICAgZWxlbWVudE5hbWUgKz0gcmVjaXBlLm5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgcGFyZW50TmFtZSA9IGVsZW1lbnROYW1lO1xuICAgIH1cbiAgICAvLyBIYW5kbGUgY2xpY2thYmxlcyBhbmQgaW5wdXRzXG4gICAgaWYgKHJlY2lwZS5jbGlja2FibGUpIHtcbiAgICAgICAgaWYgKCFyZWNpcGUubmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2xpY2thYmxlIGVsZW1lbnQgbXVzdCBoYXZlIGEgbmFtZVwiKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBoYW5kbGUgY2xpY2tfc2VsZWN0b3JcbiAgICAgICAgbGV0IGNsaWNrX2VsZW1lbnQ7XG4gICAgICAgIGlmIChyZWNpcGUuY2xpY2tfc2VsZWN0b3IpIHtcbiAgICAgICAgICAgIGNsaWNrX2VsZW1lbnQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IocmVjaXBlLmNsaWNrX3NlbGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNsaWNrX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGlmIChjbGlja19lbGVtZW50KSB7XG4gICAgICAgICAgICBjbGlja19lbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY2xpY2thYmxlLWlkXCIsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdjbGljay1lbGVtZW50IG5vdCBmb3VuZCcsIGVsZW1lbnQsIHJlY2lwZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF3aW5kb3cuY2xpY2thYmxlX3JlY2lwZXMpIHtcbiAgICAgICAgICAgIHdpbmRvdy5jbGlja2FibGVfcmVjaXBlcyA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIHdpbmRvdy5jbGlja2FibGVfcmVjaXBlc1tlbGVtZW50TmFtZV0gPSByZWNpcGU7XG4gICAgfVxuICAgIGlmICh0YWdOYW1lID09PSBcImlucHV0XCIpIHtcbiAgICAgICAgY29uc3QgaW5wdXRUeXBlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpO1xuICAgICAgICBpZiAoW1widGV4dFwiLCBcIm51bWJlclwiXS5pbmNsdWRlcyhpbnB1dFR5cGUpKSB7XG4gICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIGVsZW1lbnQudmFsdWUpO1xuICAgICAgICAgICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWlucHV0LWlkXCIsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnB1dFR5cGUgPT09IFwiY2hlY2tib3hcIikge1xuICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIGVsZW1lbnQuY2hlY2tlZC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbnB1dFR5cGUgPT09IFwicmFkaW9cIikge1xuICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsIGVsZW1lbnQuY2hlY2tlZC50b1N0cmluZygpKTtcbiAgICAgICAgICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1jbGlja2FibGUtaWRcIiwgZWxlbWVudE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghd2luZG93LmlucHV0X3JlY2lwZXMpIHtcbiAgICAgICAgICAgIHdpbmRvdy5pbnB1dF9yZWNpcGVzID0ge307XG4gICAgICAgIH1cbiAgICAgICAgd2luZG93LmlucHV0X3JlY2lwZXNbZWxlbWVudE5hbWVdID0gcmVjaXBlO1xuICAgIH1cbiAgICAvLyAqKkhhbmRsZSBzZWxlY3QgZWxlbWVudHMqKlxuICAgIGlmICh0YWdOYW1lID09PSBcInNlbGVjdFwiKSB7XG4gICAgICAgIC8vIFRhZyB0aGUgc2VsZWN0IGVsZW1lbnQgd2l0aCBkYXRhLXNlbGVjdC1pZFxuICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtc2VsZWN0LWlkXCIsIGVsZW1lbnROYW1lKTtcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnb3B0aW9uJyk7XG4gICAgICAgIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBvcHRpb25WYWx1ZSA9IG9wdGlvbi5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykgfHwgb3B0aW9uLnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgICAgIGNvbnN0IG9wdGlvbk5hbWUgPSBlbGVtZW50TmFtZSArIFwiLlwiICsgb3B0aW9uVmFsdWU7XG4gICAgICAgICAgICBjb25zdCBuZXdPcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcbiAgICAgICAgICAgIG5ld09wdGlvbi50ZXh0Q29udGVudCA9IG9wdGlvbi50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIG5ld09wdGlvbi5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgb3B0aW9uVmFsdWUpO1xuICAgICAgICAgICAgbmV3T3B0aW9uLnNldEF0dHJpYnV0ZSgnbmFtZScsIG9wdGlvbk5hbWUpO1xuICAgICAgICAgICAgbmV3T3B0aW9uLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCBvcHRpb24uc2VsZWN0ZWQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICBvcHRpb24uc2V0QXR0cmlidXRlKCdkYXRhLWNsaWNrYWJsZS1pZCcsIG9wdGlvbk5hbWUpOyAvLyBUYWcgYWN0dWFsIERPTSBvcHRpb24gZWxlbWVudFxuICAgICAgICAgICAgbmV3RWxlbWVudC5hcHBlbmRDaGlsZChuZXdPcHRpb24pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgLy8gQ29weSBzcGVjaWZpZWQgYXR0cmlidXRlc1xuICAgIGNvbnN0IGF0dHJzVG9Db3B5ID0gW1wiYWx0XCIsIFwidGl0bGVcIiwgXCJ0eXBlXCIsIFwidmFsdWVcIiwgXCJyb2xlXCIsIFwiYXJpYS1sYWJlbFwiLCBcImFyaWEtaGlkZGVuXCIsIFwiYXJpYS1zZWxlY3RlZFwiXTtcbiAgICBhdHRyc1RvQ29weS5mb3JFYWNoKChhdHRyKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoYXR0ciwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgaWYgKHJlY2lwZS5rZWVwX2F0dHIpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcmVjaXBlLmtlZXBfYXR0cikge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShrZXkpO1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgbmV3RWxlbWVudC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHJlY2lwZVsnY2xhc3MnXSkge1xuICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZSgnY2xhc3MnLCByZWNpcGVbJ2NsYXNzJ10pO1xuICAgIH1cbiAgICBpZiAocmVjaXBlWydpZCddKSB7XG4gICAgICAgIG5ld0VsZW1lbnQuc2V0QXR0cmlidXRlKCdpZCcsIHJlY2lwZVsnaWQnXSk7XG4gICAgfVxuICAgIC8vIE92ZXJyaWRlIGF0dHJpYnV0ZXMgaWYgc3BlY2lmaWVkXG4gICAgaWYgKHJlY2lwZS5vdmVycmlkZV9hdHRyKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHJlY2lwZS5vdmVycmlkZV9hdHRyKSB7XG4gICAgICAgICAgICBuZXdFbGVtZW50LnNldEF0dHJpYnV0ZShrZXksIGV2YWwocmVjaXBlLm92ZXJyaWRlX2F0dHJba2V5XSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIFByb2Nlc3MgY2hpbGRyZW5cbiAgICBpZiAocmVjaXBlLmNoaWxkcmVuICYmIHJlY2lwZS5jaGlsZHJlbi5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGRSZWNpcGUgb2YgcmVjaXBlLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjb25zdCBzZWxlY3RvciA9IGNoaWxkUmVjaXBlLmRpcmVjdF9jaGlsZCA/IGA6c2NvcGUgPiAke2NoaWxkUmVjaXBlLnNlbGVjdG9yfWAgOiBjaGlsZFJlY2lwZS5zZWxlY3RvcjtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkRWxlbWVudHMgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICAgICAgICAgICAgY2hpbGRFbGVtZW50cy5mb3JFYWNoKChjaGlsZEVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGROb2RlID0gcHJvY2Vzc0VsZW1lbnQoY2hpbGRFbGVtZW50LCBjaGlsZFJlY2lwZSwgcGFyZW50TmFtZSwgaW5kZXgpO1xuICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoY2hpbGROb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoY2hpbGRSZWNpcGUuaW5zZXJ0X3NwbGl0X21hcmtlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVyeSA9IGNoaWxkUmVjaXBlLmluc2VydF9zcGxpdF9tYXJrZXJfZXZlcnkgfHwgMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ICUgZXZlcnkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BsaXRNYXJrZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGxpdC1tYXJrZXInKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3BsaXRNYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbnNlcnRpbmcgc3BsaXQgbWFya2VyIDFcIik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkUmVjaXBlLmluc2VydF9zcGxpdF9tYXJrZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJpbnNlcnRpbmcgc3BsaXQgbWFya2VyIDJcIik7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0TWFya2VyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BsaXQtbWFya2VyJyk7XG4gICAgICAgICAgICAgICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoc3BsaXRNYXJrZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJubyBzcGxpdCBtYXJrZXJcIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSGFuZGxlIGVtcHR5IG1lc3NhZ2VzXG4gICAgaWYgKHJlY2lwZS5lbXB0eV9tZXNzYWdlICYmIG5ld0VsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnN0IGVtcHR5VGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShyZWNpcGUuZW1wdHlfbWVzc2FnZSk7XG4gICAgICAgIG5ld0VsZW1lbnQuYXBwZW5kQ2hpbGQoZW1wdHlUZXh0Tm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdFbGVtZW50O1xufVxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbmltcG9ydCB7IHByb2Nlc3NFbGVtZW50IH0gZnJvbSAnLi91dGlscy9lbGVtZW50LXByb2Nlc3Nvcic7XG5sZXQgbGFzdFNjcm9sbFRpbWUgPSAwOyAvLyBUcmFjayBsYXN0IHNjcm9sbCB0aW1lc3RhbXBcbmNvbnN0IFNDUk9MTF9USFJFU0hPTEQgPSAxNTAwOyAvLyBNaW5pbXVtIHRpbWUgaW4gbXMgYmV0d2VlbiBzY3JlZW5zaG90cyBmb3Igc2Nyb2xsIGFjdGlvbnNcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCAoKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBjb25zb2xlLmxvZygnRE9NQ29udGVudExvYWRlZCcpO1xuICAgIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiB7XG4gICAgICAgICAgICBjaHJvbWUucnVudGltZS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiAnZ2V0UmVjaXBlJyxcbiAgICAgICAgICAgICAgICB1cmw6IHVybFxuICAgICAgICAgICAgfSwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zb2xlLmxvZygncmVzcG9uc2UnKTtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnJlY2lwZSkge1xuICAgICAgICAgICAgY29uc3QgcmVjaXBlID0gcmVzcG9uc2UucmVjaXBlO1xuICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHJlY2lwZS5zZWxlY3Rvcik7XG4gICAgICAgICAgICBpZiAocm9vdEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSb290ID0gcHJvY2Vzc0VsZW1lbnQocm9vdEVsZW1lbnQsIHJlY2lwZSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2cobmV3Um9vdC5vdXRlckhUTUwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbml0aWFsaXppbmcgY2xpY2thYmxlIGVsZW1lbnRzOicsIGVycm9yKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICBjYXB0dXJlU2NyZWVuc2hvdCh0aW1lc3RhbXApO1xuICAgICAgICBjYXB0dXJlSW50ZXJhY3Rpb24oJ25hdmlnYXRlJywgJycsIHRpbWVzdGFtcCwgJycsICcnLCB1cmwpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FwdHVyaW5nIHNjcmVlbnNob3Q6JywgZXJyb3IpO1xuICAgIH1cbn0pKTtcbmZ1bmN0aW9uIGdlbmVyYXRlSHRtbFNuYXBzaG90SWQoKSB7XG4gICAgY29uc3QgdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgIHJldHVybiBgaHRtbF8ke2hhc2hDb2RlKHVybCl9XyR7dGltZXN0YW1wfWA7XG59XG5mdW5jdGlvbiBoYXNoQ29kZShzdHIpIHtcbiAgICBsZXQgaGFzaCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgc3RyLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgIGhhc2ggfD0gMDtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJIYXNoIHZhbHVlIGJlZm9yZSByZXR1cm46XCIsIGhhc2gpO1xuICAgIHJldHVybiBoYXNoLnRvU3RyaW5nKCk7XG59XG4vLyBGdW5jdGlvbiB0byBnZXQgY2xpY2thYmxlIGVsZW1lbnRzIGluIHRoZSB2aWV3cG9ydFxuZnVuY3Rpb24gZ2V0Q2xpY2thYmxlRWxlbWVudHNJblZpZXdwb3J0KCkge1xuICAgIGNvbnN0IGNsaWNrYWJsZUVsZW1lbnRzID0gW107IC8vIEFycmF5IHRvIHN0b3JlIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgIC8vIFNlbGVjdCBhbGwgcG90ZW50aWFsIGNsaWNrYWJsZSBlbGVtZW50c1xuICAgIGNvbnN0IGFsbEVsZW1lbnRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYSwgYnV0dG9uLCBbb25jbGlja10sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIGlucHV0W3R5cGU9XCJzdWJtaXRcIl0nKTtcbiAgICAvLyBDaGVjayBpZiBlYWNoIGVsZW1lbnQgaXMgaW4gdGhlIHZpZXdwb3J0XG4gICAgYWxsRWxlbWVudHMuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICBjb25zdCByZWN0ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHJlY3QudG9wID49IDAgJiZcbiAgICAgICAgICAgIHJlY3QubGVmdCA+PSAwICYmXG4gICAgICAgICAgICByZWN0LmJvdHRvbSA8PSAod2luZG93LmlubmVySGVpZ2h0IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQpICYmXG4gICAgICAgICAgICByZWN0LnJpZ2h0IDw9ICh3aW5kb3cuaW5uZXJXaWR0aCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGgpKSB7XG4gICAgICAgICAgICBjbGlja2FibGVFbGVtZW50cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0YWdOYW1lOiBlbGVtZW50LnRhZ05hbWUsXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBlbGVtZW50LmNsYXNzTmFtZSxcbiAgICAgICAgICAgICAgICBpZDogZWxlbWVudC5pZCxcbiAgICAgICAgICAgICAgICBpbm5lclRleHQ6IGVsZW1lbnQuaW5uZXJUZXh0LnRyaW0oKSxcbiAgICAgICAgICAgICAgICBvdXRlckhUTUw6IGVsZW1lbnQub3V0ZXJIVE1MLnRyaW0oKSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsaWNrYWJsZUVsZW1lbnRzO1xufVxuLy8gRnVuY3Rpb24gdG8gY2FwdHVyZSBpbnRlcmFjdGlvbnNcbmZ1bmN0aW9uIGNhcHR1cmVJbnRlcmFjdGlvbihldmVudFR5cGUsIHRhcmdldCwgdGltZXN0YW1wLCBzZWxlY3RvciwgY2xpY2thYmxlSWQsIHVybCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBuZXcgSFRNTCBzbmFwc2hvdCBJRFxuICAgICAgICAgICAgY29uc3QgY3VycmVudFNuYXBzaG90SWQgPSBnZW5lcmF0ZUh0bWxTbmFwc2hvdElkKCk7XG4gICAgICAgICAgICAvLyBTYXZlIEhUTUwgc25hcHNob3QgYW5kIHdhaXQgZm9yIGl0IHRvIGNvbXBsZXRlXG4gICAgICAgICAgICB5aWVsZCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KFsnaHRtbFNuYXBzaG90cyddLCAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxTbmFwc2hvdHMgPSByZXN1bHQuaHRtbFNuYXBzaG90cyB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgaHRtbFNuYXBzaG90c1tjdXJyZW50U25hcHNob3RJZF0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub3V0ZXJIVE1MO1xuICAgICAgICAgICAgICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBodG1sU25hcHNob3RzIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUucnVudGltZS5sYXN0RXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoY2hyb21lLnJ1bnRpbWUubGFzdEVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodm9pZCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIGNvbnN0IGNsaWNrYWJsZUVsZW1lbnRzID0gZ2V0Q2xpY2thYmxlRWxlbWVudHNJblZpZXdwb3J0KCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgICAgICAgICAgICB0YXJnZXRPdXRlckhUTUw6IHRhcmdldC5vdXRlckhUTUwsXG4gICAgICAgICAgICAgICAgdGFyZ2V0Q2xhc3M6IHRhcmdldC5jbGFzc05hbWUsXG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQ6IHRhcmdldC5pZCxcbiAgICAgICAgICAgICAgICB0YXJnZXRUZXh0OiB0YXJnZXQuaW5uZXJUZXh0IHx8IHRhcmdldC52YWx1ZSB8fCAnJyxcbiAgICAgICAgICAgICAgICBodG1sU25hcHNob3RJZDogY3VycmVudFNuYXBzaG90SWQsXG4gICAgICAgICAgICAgICAgLy8gY2xpY2thYmxlRWxlbWVudHM6IGNsaWNrYWJsZUVsZW1lbnRzLFxuICAgICAgICAgICAgICAgIHNlbGVjdG9yOiBzZWxlY3RvciB8fCAnJyxcbiAgICAgICAgICAgICAgICBjbGlja2FibGVJZDogY2xpY2thYmxlSWQgfHwgJycsXG4gICAgICAgICAgICAgICAgdXJsOiB1cmwgfHwgJycsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgeWllbGQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyBhY3Rpb246ICdzYXZlRGF0YScsIGRhdGEgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJvciBkdXJpbmcgJHtldmVudFR5cGV9IGV2ZW50IGhhbmRsaW5nOmAsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuLy8gQ2FwdHVyZSBzY3JvbGwgaW50ZXJhY3Rpb25zXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoZXZlbnQpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgaWYgKGN1cnJlbnRUaW1lIC0gbGFzdFNjcm9sbFRpbWUgPj0gU0NST0xMX1RIUkVTSE9MRCkge1xuICAgICAgICAgICAgbGFzdFNjcm9sbFRpbWUgPSBjdXJyZW50VGltZTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIHlpZWxkIGNhcHR1cmVJbnRlcmFjdGlvbignc2Nyb2xsJywgZXZlbnQudGFyZ2V0LCB0aW1lc3RhbXAsICcnLCAnJywgJycpO1xuICAgICAgICAgICAgeWllbGQgY2FwdHVyZVNjcmVlbnNob3QodGltZXN0YW1wKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNjcm9sbCBldmVudCBoYW5kbGluZzonLCBlcnJvcik7XG4gICAgfVxufSkpO1xuLy8gY29uc3QgZGVib3VuY2VkU2Nyb2xsSGFuZGxlciA9IGRlYm91bmNlKGFzeW5jIChldmVudDogRXZlbnQpID0+IHtcbi8vICAgICB0cnkge1xuLy8gICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4vLyAgICAgICAgIGF3YWl0IGNhcHR1cmVJbnRlcmFjdGlvbignc2Nyb2xsJywgZXZlbnQudGFyZ2V0LCB0aW1lc3RhbXAsICcnLCAnJywgJycpO1xuLy8gICAgICAgICBhd2FpdCBjYXB0dXJlU2NyZWVuc2hvdCh0aW1lc3RhbXApO1xuLy8gICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4vLyAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGR1cmluZyBzY3JvbGwgZXZlbnQgaGFuZGxpbmc6JywgZXJyb3IpO1xuLy8gICAgIH1cbi8vIH0sIDIwMCk7XG4vLyBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBkZWJvdW5jZWRTY3JvbGxIYW5kbGVyKTtcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJibHVyXCIsIChldmVudCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgaWYgKGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQudGFnTmFtZSA9PT0gXCJJTlBVVFwiIHx8IGV2ZW50LnRhcmdldC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCIpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIHlpZWxkIGNhcHR1cmVTY3JlZW5zaG90KHRpbWVzdGFtcCk7XG4gICAgICAgIHlpZWxkIGNhcHR1cmVJbnRlcmFjdGlvbihcImlucHV0XCIsIHRhcmdldCwgdGltZXN0YW1wLCAnJywgJycsICcnKTtcbiAgICB9XG59KSwgdHJ1ZSk7XG4vLyBDYXB0dXJlIGNsaWNrIGludGVyYWN0aW9uc1xuZnVuY3Rpb24gZ2V0VW5pcXVlU2VsZWN0b3IoZWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50LmlkKSB7XG4gICAgICAgIHJldHVybiBgIyR7ZWxlbWVudC5pZH1gO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudC5jbGFzc05hbWUpIHtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gZWxlbWVudC5jbGFzc05hbWUudHJpbSgpLnNwbGl0KC9cXHMrLykuam9pbignLicpO1xuICAgICAgICByZXR1cm4gYCR7ZWxlbWVudC50YWdOYW1lLnRvTG93ZXJDYXNlKCl9LiR7Y2xhc3NOYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbn1cbmZ1bmN0aW9uIGdldEZ1bGxTZWxlY3RvcihlbGVtZW50KSB7XG4gICAgbGV0IHBhdGggPSBbXTtcbiAgICB3aGlsZSAoZWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgIHBhdGgudW5zaGlmdChnZXRVbmlxdWVTZWxlY3RvcihlbGVtZW50KSk7XG4gICAgICAgIGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG4gICAgfVxuICAgIHJldHVybiBwYXRoLmpvaW4oJyA+ICcpO1xufVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBmdW5jdGlvbiBmaW5kQ2xpY2thYmxlUGFyZW50KGVsZW1lbnQsIGRlcHRoID0gMCkge1xuICAgICAgICAgICAgaWYgKCFlbGVtZW50IHx8IGRlcHRoID49IDIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC5oYXNBdHRyaWJ1dGUoJ2RhdGEtY2xpY2thYmxlLWlkJykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmaW5kQ2xpY2thYmxlUGFyZW50KGVsZW1lbnQucGFyZW50RWxlbWVudCwgZGVwdGggKyAxKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjbGlja2FibGVFbGVtZW50ID0gZmluZENsaWNrYWJsZVBhcmVudChldmVudC50YXJnZXQpO1xuICAgICAgICBjb25zdCBjbGlja2FibGVJZCA9IGNsaWNrYWJsZUVsZW1lbnQgPyBjbGlja2FibGVFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1jbGlja2FibGUtaWQnKSB8fCAnJyA6ICcnO1xuICAgICAgICBjb25zb2xlLmxvZygnY2xpY2snKTtcbiAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUoKS50b0lTT1N0cmluZygpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aW1lc3RhbXApO1xuICAgICAgICBjb25zdCBzZWxlY3RvciA9IGdldEZ1bGxTZWxlY3RvcihldmVudC50YXJnZXQpO1xuICAgICAgICBjb25zb2xlLmxvZygnc3JhcnQgc2NyZWVuc2hvdCcpO1xuICAgICAgICBjYXB0dXJlU2NyZWVuc2hvdCh0aW1lc3RhbXApO1xuICAgICAgICBjb25zb2xlLmxvZygnZW5kIHNjcmVlbnNob3QnKTtcbiAgICAgICAgY2FwdHVyZUludGVyYWN0aW9uKCdjbGljaycsIGV2ZW50LnRhcmdldCwgdGltZXN0YW1wLCBzZWxlY3RvciwgY2xpY2thYmxlSWQsICcnKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2VuZCcpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIGNsaWNrIGV2ZW50IGhhbmRsaW5nOicsIGVycm9yKTtcbiAgICB9XG59KTtcbi8vIEZ1bmN0aW9uIHRvIGNhcHR1cmUgc2NyZWVuc2hvdHMgd2l0aCB1bmlxdWUgSURcbmZ1bmN0aW9uIGNhcHR1cmVTY3JlZW5zaG90KHRpbWVzdGFtcCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhIHVuaXF1ZSBzY3JlZW5zaG90IElEXG4gICAgICAgICAgICBjb25zdCBzY3JlZW5zaG90SWQgPSBgc2NyZWVuc2hvdF8ke3RpbWVzdGFtcH1gO1xuICAgICAgICAgICAgLy8gQ2FwdHVyZSB0aGUgc2NyZWVuc2hvdFxuICAgICAgICAgICAgeWllbGQgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UoeyBhY3Rpb246ICdjYXB0dXJlU2NyZWVuc2hvdCcsIHNjcmVlbnNob3RJZCB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGNhcHR1cmluZyBzY3JlZW5zaG90OicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH0pO1xufVxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIiwgKCkgPT4ge1xuICAgIC8vIGdldCBhbGwgXCJQbGFjZSBZb3VyIE9yZGVyXCIgYnV0dG9uc1xuICAgIGNvbnN0IHBsYWNlT3JkZXJCdXR0b25zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbaWQ9XCJwbGFjZU9yZGVyXCJdLCBpbnB1dFtpZD1cInR1cmJvLWNoZWNrb3V0LXB5by1idXR0b25cIl0nKTtcbiAgICBpZiAocGxhY2VPcmRlckJ1dHRvbnMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm8gUGxhY2UgWW91ciBPcmRlciBidXR0b25zIGZvdW5kIVwiKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBnZXQgYWxsIHByb2R1Y3QgaW5mb3JtYXRpb24sIGZpbHRlciBvdXQgaW50ZXJmZXJlbmNlIGl0ZW1zXG4gICAgY29uc3QgaXRlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGluZWl0ZW0tdGl0bGUtdGV4dCcpO1xuICAgIGNvbnN0IG9yZGVyRGV0YWlscyA9IFtdO1xuICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBmaWx0ZXIgb3V0IGludGVyZmVyZW5jZSBpdGVtc1xuICAgICAgICBpZiAoaXRlbS5tYXRjaGVzKCcuYS1zaXplLWJhc2UubGluZWl0ZW0tdGl0bGUtdGV4dCcpKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNraXBwaW5nIGludGVyZmVyaW5nIGVsZW1lbnQ6XCIsIGl0ZW0uaW5uZXJUZXh0KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBnZXQgcHJvZHVjdCBuYW1lXG4gICAgICAgIGNvbnN0IHByb2R1Y3ROYW1lID0gaXRlbS5pbm5lclRleHQudHJpbSgpO1xuICAgICAgICAvLyBnZXQgcHJvZHVjdCBwcmljZVxuICAgICAgICBjb25zdCBwcmljZUVsZW1lbnQgPSAoX2EgPSBpdGVtLmNsb3Nlc3QoJ2RpdicpKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucXVlcnlTZWxlY3RvcignLmxpbmVpdGVtLXByaWNlLXRleHQnKTtcbiAgICAgICAgY29uc3QgcHJvZHVjdFByaWNlID0gcHJpY2VFbGVtZW50ICYmIHByaWNlRWxlbWVudC5pbm5lclRleHRcbiAgICAgICAgICAgID8gcHJpY2VFbGVtZW50LmlubmVyVGV4dC50cmltKCkucmVwbGFjZSgnJCcsICcnKVxuICAgICAgICAgICAgOiAnMC4wMCc7XG4gICAgICAgIG9yZGVyRGV0YWlscy5wdXNoKHtcbiAgICAgICAgICAgIG5hbWU6IHByb2R1Y3ROYW1lLFxuICAgICAgICAgICAgcHJpY2U6IHBhcnNlRmxvYXQocHJvZHVjdFByaWNlKSxcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgLy8gYWRkIGxpc3RlbmVyIHRvIGVhY2ggYnV0dG9uXG4gICAgcGxhY2VPcmRlckJ1dHRvbnMuZm9yRWFjaCgoYnV0dG9uKSA9PiB7XG4gICAgICAgIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKGV2ZW50KSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUGxhY2UgWW91ciBPcmRlciBidXR0b24gY2xpY2tlZCFcIik7XG4gICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgb3JkZXJEZXRhaWxzOiBbXSB9KTtcbiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5vcmRlckRldGFpbHMgfHwgW107XG4gICAgICAgICAgICBsZXQgc3RvcmVPcmRlckRldGFpbHMgPSByZXN1bHQuY29uY2F0KG9yZGVyRGV0YWlscyk7XG4gICAgICAgICAgICB5aWVsZCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBvcmRlckRldGFpbHM6IHN0b3JlT3JkZXJEZXRhaWxzIH0pO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59KTtcbmNocm9tZS5ydW50aW1lLm9uTWVzc2FnZS5hZGRMaXN0ZW5lcigobWVzc2FnZSwgc2VuZGVyLCBzZW5kUmVzcG9uc2UpID0+IHtcbiAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdnZXRIVE1MJykge1xuICAgICAgICBjb25zdCBodG1sQ29udGVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vdXRlckhUTUw7XG4gICAgICAgIHNlbmRSZXNwb25zZSh7IGh0bWw6IGh0bWxDb250ZW50IH0pO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn0pO1xuLy8gLy8gQWRkIHdpbmRvdyBiZWZvcmV1bmxvYWQgZXZlbnQgbGlzdGVuZXJcbi8vIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmV1bmxvYWQnLCBhc3luYyAoZXZlbnQpID0+IHtcbi8vICAgICB0cnkge1xuLy8gICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4vLyAgICAgICAgIGNvbnN0IHVybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuLy8gICAgICAgICAvLyBDYXB0dXJlIGZpbmFsIHN0YXRlIGJlZm9yZSBuYXZpZ2F0aW9uXG4vLyAgICAgICAgIGF3YWl0IGNhcHR1cmVTY3JlZW5zaG90KHRpbWVzdGFtcCk7XG4vLyAgICAgICAgIGF3YWl0IGNhcHR1cmVJbnRlcmFjdGlvbihcbi8vICAgICAgICAgICAgICduYXZpZ2F0ZV9hd2F5JywgXG4vLyAgICAgICAgICAgICB7XG4vLyAgICAgICAgICAgICAgICAgb3V0ZXJIVE1MOiAnJyxcbi8vICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICcnLFxuLy8gICAgICAgICAgICAgICAgIGlkOiAnJyxcbi8vICAgICAgICAgICAgICAgICBpbm5lclRleHQ6ICcnLFxuLy8gICAgICAgICAgICAgICAgIHZhbHVlOiAnJ1xuLy8gICAgICAgICAgICAgfSxcbi8vICAgICAgICAgICAgIHRpbWVzdGFtcCxcbi8vICAgICAgICAgICAgICcnLFxuLy8gICAgICAgICAgICAgJycsXG4vLyAgICAgICAgICAgICB1cmxcbi8vICAgICAgICAgKTtcbi8vICAgICB9IGNhdGNoIChlcnJvcikge1xuLy8gICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBkdXJpbmcgYmVmb3JldW5sb2FkIGV2ZW50IGhhbmRsaW5nOicsIGVycm9yKTtcbi8vICAgICB9XG4vLyB9KTtcbiJdLCJuYW1lcyI6WyJwcm9jZXNzRWxlbWVudCIsImVsZW1lbnQiLCJyZWNpcGUiLCJwYXJlbnROYW1lIiwibnRoQ2hpbGQiLCJ0YWdOYW1lIiwidGFnX25hbWUiLCJ0b0xvd2VyQ2FzZSIsImVuZHNXaXRoIiwic2xpY2UiLCJuZXdFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZWxlbWVudFRleHQiLCJ0ZXh0X3NlbGVjdG9yIiwidGV4dEVsZW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJUZXh0IiwidGV4dENvbnRlbnQiLCJ0ZXh0X2pzIiwiZXZhbCIsImFkZF90ZXh0IiwicmVwbGFjZSIsInRyaW0iLCJ0ZXh0X2Zvcm1hdCIsImVsZW1lbnROYW1lIiwibmFtZSIsInRvU3RyaW5nIiwic2V0QXR0cmlidXRlIiwiY2xpY2thYmxlIiwiRXJyb3IiLCJjbGlja19lbGVtZW50IiwiY2xpY2tfc2VsZWN0b3IiLCJjb25zb2xlIiwibG9nIiwid2luZG93IiwiY2xpY2thYmxlX3JlY2lwZXMiLCJpbnB1dFR5cGUiLCJnZXRBdHRyaWJ1dGUiLCJpbmNsdWRlcyIsInZhbHVlIiwiY2hlY2tlZCIsImlucHV0X3JlY2lwZXMiLCJvcHRpb25zIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJvcHRpb24iLCJvcHRpb25WYWx1ZSIsIm9wdGlvbk5hbWUiLCJuZXdPcHRpb24iLCJzZWxlY3RlZCIsImFwcGVuZENoaWxkIiwiYXR0cnNUb0NvcHkiLCJhdHRyIiwia2VlcF9hdHRyIiwia2V5Iiwib3ZlcnJpZGVfYXR0ciIsImNoaWxkcmVuIiwibGVuZ3RoIiwiY2hpbGRSZWNpcGUiLCJzZWxlY3RvciIsImRpcmVjdF9jaGlsZCIsImNoaWxkRWxlbWVudHMiLCJjaGlsZEVsZW1lbnQiLCJpbmRleCIsImNoaWxkTm9kZSIsImluc2VydF9zcGxpdF9tYXJrZXIiLCJpbnNlcnRfc3BsaXRfbWFya2VyX2V2ZXJ5Iiwic3BsaXRNYXJrZXIiLCJlbXB0eV9tZXNzYWdlIiwiZW1wdHlUZXh0Tm9kZSIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJkIiwiZGVmaW5pdGlvbiIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiX19hd2FpdGVyIiwidGhpc0FyZyIsIl9hcmd1bWVudHMiLCJQIiwiZ2VuZXJhdG9yIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsImUiLCJyZWplY3RlZCIsInJlc3VsdCIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJsYXN0U2Nyb2xsVGltZSIsIlNDUk9MTF9USFJFU0hPTEQiLCJnZW5lcmF0ZUh0bWxTbmFwc2hvdElkIiwidXJsIiwibG9jYXRpb24iLCJocmVmIiwidGltZXN0YW1wIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiaGFzaENvZGUiLCJzdHIiLCJoYXNoIiwiaSIsImNoYXJDb2RlQXQiLCJnZXRDbGlja2FibGVFbGVtZW50c0luVmlld3BvcnQiLCJjbGlja2FibGVFbGVtZW50cyIsInJlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJsZWZ0IiwiYm90dG9tIiwiaW5uZXJIZWlnaHQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRIZWlnaHQiLCJyaWdodCIsImlubmVyV2lkdGgiLCJjbGllbnRXaWR0aCIsInB1c2giLCJjbGFzc05hbWUiLCJpZCIsIm91dGVySFRNTCIsImNhcHR1cmVJbnRlcmFjdGlvbiIsImV2ZW50VHlwZSIsInRhcmdldCIsImNsaWNrYWJsZUlkIiwidGhpcyIsImN1cnJlbnRTbmFwc2hvdElkIiwiY2hyb21lIiwic3RvcmFnZSIsImxvY2FsIiwiaHRtbFNuYXBzaG90cyIsInNldCIsInJ1bnRpbWUiLCJsYXN0RXJyb3IiLCJkYXRhIiwidGFyZ2V0T3V0ZXJIVE1MIiwidGFyZ2V0Q2xhc3MiLCJ0YXJnZXRJZCIsInRhcmdldFRleHQiLCJodG1sU25hcHNob3RJZCIsInNlbmRNZXNzYWdlIiwiYWN0aW9uIiwiZXJyb3IiLCJnZXRVbmlxdWVTZWxlY3RvciIsInNwbGl0Iiwiam9pbiIsImdldEZ1bGxTZWxlY3RvciIsInBhdGgiLCJwYXJlbnRFbGVtZW50IiwidW5zaGlmdCIsImNhcHR1cmVTY3JlZW5zaG90Iiwic2NyZWVuc2hvdElkIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlc3BvbnNlIiwicm9vdEVsZW1lbnQiLCJuZXdSb290IiwiZXZlbnQiLCJjdXJyZW50VGltZSIsIm5vdyIsImZpbmRDbGlja2FibGVQYXJlbnQiLCJkZXB0aCIsImhhc0F0dHJpYnV0ZSIsImNsaWNrYWJsZUVsZW1lbnQiLCJwbGFjZU9yZGVyQnV0dG9ucyIsIml0ZW1zIiwib3JkZXJEZXRhaWxzIiwiaXRlbSIsIl9hIiwibWF0Y2hlcyIsInByb2R1Y3ROYW1lIiwicHJpY2VFbGVtZW50IiwiY2xvc2VzdCIsInByb2R1Y3RQcmljZSIsInByaWNlIiwicGFyc2VGbG9hdCIsImJ1dHRvbiIsInN0b3JlT3JkZXJEZXRhaWxzIiwiY29uY2F0Iiwib25NZXNzYWdlIiwiYWRkTGlzdGVuZXIiLCJtZXNzYWdlIiwic2VuZGVyIiwic2VuZFJlc3BvbnNlIiwiaHRtbCJdLCJzb3VyY2VSb290IjoiIn0=