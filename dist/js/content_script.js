(()=>{"use strict";var __awaiter=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function c(e){try{a(r.next(e))}catch(e){i(e)}}function l(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,l)}a((r=r.apply(e,t||[])).next())}))};let lastScrollTime=0;const SCROLL_THRESHOLD=1500;let htmlSnapshotId=null;function processElement(element,recipe,parentName="",nthChild=0){let tagName=recipe.tag_name||element.tagName.toLowerCase();tagName.endsWith("_")&&(tagName=tagName.slice(0,-1));const newElement=document.createElement(tagName);let elementText="";if(recipe.text_selector){const e=element.querySelector(recipe.text_selector);e&&(elementText=e.innerText||e.textContent||"")}else recipe.text_js?elementText=eval(recipe.text_js):recipe.add_text&&(elementText=element.innerText||element.textContent||"");elementText=elementText.replace(/\s+/g," ").trim(),recipe.text_format&&elementText&&(elementText=recipe.text_format.replace("{}",elementText)),elementText&&recipe.add_text&&(newElement.textContent=elementText);let elementName="";if(recipe.name&&("from_text"===recipe.name?(elementName=parentName?parentName+".":"",elementName+=elementText.toLowerCase().replace(/[^\w]+/g,"_")):"from_nth_child"===recipe.name?(elementName=parentName?parentName+".":"",elementName+=nthChild.toString()):(elementName=parentName?parentName+".":"",elementName+=recipe.name),newElement.setAttribute("name",elementName),parentName=elementName),recipe.clickable){if(!recipe.name)throw new Error("clickable element must have a name");let e;e=recipe.click_selector?element.querySelector(recipe.click_selector):element,e?e.setAttribute("data-clickable-id",elementName):console.log("click-element not found",element,recipe),window.clickable_recipes||(window.clickable_recipes={}),window.clickable_recipes[elementName]=recipe}if("input"===tagName){const e=element.getAttribute("type");["text","number"].includes(e)?(newElement.setAttribute("value",element.value),element.setAttribute("data-input-id",elementName)):"checkbox"===e?newElement.setAttribute("checked",element.checked.toString()):"radio"===e&&(newElement.setAttribute("checked",element.checked.toString()),element.setAttribute("data-clickable-id",elementName)),window.input_recipes||(window.input_recipes={}),window.input_recipes[elementName]=recipe}if("select"===tagName){element.setAttribute("data-select-id",elementName);const e=element.querySelectorAll("option");e.forEach((e=>{const t=e.getAttribute("value")||e.textContent.trim(),n=elementName+"."+t,r=document.createElement("option");r.textContent=e.textContent,r.setAttribute("value",t),r.setAttribute("name",n),r.setAttribute("selected",e.selected.toString()),e.setAttribute("data-clickable-id",n),newElement.appendChild(r)}))}const attrsToCopy=["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"];if(attrsToCopy.forEach((e=>{const t=element.getAttribute(e);t&&newElement.setAttribute(e,t)})),recipe.keep_attr)for(const e in recipe.keep_attr){const t=element.getAttribute(e);t&&newElement.setAttribute(e,t)}if(recipe.class&&newElement.setAttribute("class",recipe.class),recipe.id&&newElement.setAttribute("id",recipe.id),recipe.override_attr)for(const key in recipe.override_attr)newElement.setAttribute(key,eval(recipe.override_attr[key]));if(recipe.children&&recipe.children.length>0)for(const e of recipe.children){const t=e.direct_child?`:scope > ${e.selector}`:e.selector,n=element.querySelectorAll(t);n.forEach(((t,n)=>{const r=processElement(t,e,parentName,n);if(newElement.appendChild(r),e.insert_split_marker&&n%(e.insert_split_marker_every||1)==0){const e=document.createElement("split-marker");newElement.appendChild(e)}if(e.insert_split_marker){const e=document.createElement("split-marker");newElement.appendChild(e)}else console.log("no split marker")}))}if(recipe.empty_message&&0===newElement.children.length){const e=document.createTextNode(recipe.empty_message);newElement.appendChild(e)}return newElement}function generateHtmlSnapshotId(){const e=window.location.href,t=(new Date).toISOString();return`html_${hashCode(e)}_${t}`}function hashCode(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return console.log("Hash value before return:",t),t.toString()}function getClickableElementsInViewport(){const e=[];return document.querySelectorAll('a, button, [onclick], input[type="button"], input[type="submit"]').forEach((t=>{const n=t.getBoundingClientRect();n.top>=0&&n.left>=0&&n.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&n.right<=(window.innerWidth||document.documentElement.clientWidth)&&e.push({tagName:t.tagName,className:t.className,id:t.id,innerText:t.innerText.trim(),outerHTML:t.outerHTML.trim()})})),e}function captureInteraction(e,t,n,r,o,i){return __awaiter(this,void 0,void 0,(function*(){try{const c=generateHtmlSnapshotId();yield new Promise(((e,t)=>{chrome.storage.local.get(["htmlSnapshots"],(n=>{const r=n.htmlSnapshots||{};r[c]=document.documentElement.outerHTML,chrome.storage.local.set({htmlSnapshots:r},(()=>{chrome.runtime.lastError?t(chrome.runtime.lastError):e(void 0)}))}))}));const l={eventType:e,timestamp:n,target:t,targetOuterHTML:t.outerHTML,targetClass:t.className,targetId:t.id,targetText:t.innerText||t.value||"",htmlSnapshotId:c,selector:r||"",clickableId:o||"",url:i||""};yield chrome.runtime.sendMessage({action:"saveData",data:l})}catch(t){console.error(`Error during ${e} event handling:`,t)}}))}function getUniqueSelector(e){if(e.id)return`#${e.id}`;if(e.className){const t=e.className.trim().split(/\s+/).join(".");return`${e.tagName.toLowerCase()}.${t}`}return e.tagName.toLowerCase()}function getFullSelector(e){let t=[];for(;e.parentElement;)t.unshift(getUniqueSelector(e)),e=e.parentElement;return t.join(" > ")}function captureScreenshot(e){return __awaiter(this,void 0,void 0,(function*(){try{const t=`screenshot_${e}`;yield chrome.runtime.sendMessage({action:"captureScreenshot",screenshotId:t})}catch(e){console.error("Error capturing screenshot:",e)}}))}document.addEventListener("DOMContentLoaded",(()=>__awaiter(void 0,void 0,void 0,(function*(){console.log("DOMContentLoaded");const e=window.location.href;try{const t=yield new Promise((t=>{chrome.runtime.sendMessage({action:"getRecipe",url:e},t)}));if(console.log("response"),t&&t.recipe){const e=t.recipe,n=document.querySelector(e.selector);if(n){const t=processElement(n,e);console.log(t.outerHTML)}}}catch(e){console.error("Error initializing clickable elements:",e)}try{const t=(new Date).toISOString();captureScreenshot(t),captureInteraction("navigate","",t,"","",e)}catch(e){console.error("Error capturing screenshot:",e)}})))),document.addEventListener("scroll",(e=>__awaiter(void 0,void 0,void 0,(function*(){try{const t=Date.now();if(t-lastScrollTime>=SCROLL_THRESHOLD){lastScrollTime=t;const n=(new Date).toISOString();yield captureInteraction("scroll",e.target,n,"","",""),yield captureScreenshot(n)}}catch(e){console.error("Error during scroll event handling:",e)}})))),document.addEventListener("blur",(e=>__awaiter(void 0,void 0,void 0,(function*(){if(e.target&&"INPUT"===e.target.tagName||"TEXTAREA"===e.target.tagName){const t=e.target,n=(new Date).toISOString();yield captureScreenshot(n),yield captureInteraction("input",t,n,"","","")}}))),!0),document.addEventListener("click",(e=>{try{function t(e,n=0){return!e||n>=2?null:e.hasAttribute("data-clickable-id")?e:t(e.parentElement,n+1)}const n=t(e.target),r=n&&n.getAttribute("data-clickable-id")||"";console.log("click");const o=(new Date).toISOString();console.log(o);const i=getFullSelector(e.target);console.log("srart screenshot"),captureScreenshot(o),console.log("end screenshot"),captureInteraction("click",e.target,o,i,r,""),console.log("end")}catch(c){console.error("Error during click event handling:",c)}})),document.addEventListener("DOMContentLoaded",(()=>{const e=document.querySelectorAll('input[id="placeOrder"]');if(0===e.length)return void console.log("No Place Your Order buttons found!");const t=document.querySelectorAll(".lineitem-title-text"),n=[];t.forEach((e=>{var t;if(e.matches(".a-size-base.lineitem-title-text"))return void console.log("Skipping interfering element:",e.innerText);const r=e.innerText.trim(),o=null===(t=e.closest("div"))||void 0===t?void 0:t.querySelector(".lineitem-price-text"),i=o&&o.innerText?o.innerText.trim().replace("$",""):"0.00";n.push({name:r,price:parseFloat(i)})})),e.forEach((e=>{e.addEventListener("click",(e=>__awaiter(void 0,void 0,void 0,(function*(){console.log("Place Your Order button clicked!");let e=yield chrome.storage.local.get({orderDetails:[]});e=e.orderDetails||[];let t=e.concat(n);yield chrome.storage.local.set({orderDetails:t})}))))}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,