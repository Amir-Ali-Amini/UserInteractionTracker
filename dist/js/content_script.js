(()=>{"use strict";var __webpack_modules__={723:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function processElement(element,recipe,parentName="",nthChild=0){let tagName=recipe.tag_name||element.tagName.toLowerCase();tagName.endsWith("_")&&(tagName=tagName.slice(0,-1));const newElement=document.createElement(tagName);let elementText="";if(recipe.text_selector){const e=element.querySelector(recipe.text_selector);e&&(elementText=e.innerText||e.textContent||"")}else recipe.text_js?elementText=eval(recipe.text_js):recipe.add_text&&(elementText=element.innerText||element.textContent||"");elementText=elementText.replace(/\s+/g," ").trim(),recipe.text_format&&elementText&&(elementText=recipe.text_format.replace("{}",elementText)),elementText&&recipe.add_text&&(newElement.textContent=elementText);let elementName="";if(recipe.name&&("from_text"===recipe.name?(elementName=parentName?parentName+".":"",elementName+=elementText.toLowerCase().replace(/[^\w]+/g,"_")):"from_nth_child"===recipe.name?(elementName=parentName?parentName+".":"",elementName+=nthChild.toString()):(elementName=parentName?parentName+".":"",elementName+=recipe.name),newElement.setAttribute("name",elementName),parentName=elementName),recipe.clickable){if(!recipe.name)throw new Error("clickable element must have a name");let e;e=recipe.click_selector?element.querySelector(recipe.click_selector):element,e?e.setAttribute("data-clickable-id",elementName):console.log("click-element not found",element,recipe),window.clickable_recipes||(window.clickable_recipes={}),window.clickable_recipes[elementName]=recipe}if("input"===tagName){const e=element.getAttribute("type");["text","number"].includes(e)?(newElement.setAttribute("value",element.value),element.setAttribute("data-input-id",elementName)):"checkbox"===e?newElement.setAttribute("checked",element.checked.toString()):"radio"===e&&(newElement.setAttribute("checked",element.checked.toString()),element.setAttribute("data-clickable-id",elementName)),window.input_recipes||(window.input_recipes={}),window.input_recipes[elementName]=recipe}if("select"===tagName){element.setAttribute("data-select-id",elementName);const e=element.querySelectorAll("option");e.forEach((e=>{const t=e.getAttribute("value")||e.textContent.trim(),n=elementName+"."+t,r=document.createElement("option");r.textContent=e.textContent,r.setAttribute("value",t),r.setAttribute("name",n),r.setAttribute("selected",e.selected.toString()),e.setAttribute("data-clickable-id",n),newElement.appendChild(r)}))}const attrsToCopy=["alt","title","type","value","role","aria-label","aria-hidden","aria-selected"];if(attrsToCopy.forEach((e=>{const t=element.getAttribute(e);t&&newElement.setAttribute(e,t)})),recipe.keep_attr)for(const e in recipe.keep_attr){const t=element.getAttribute(e);t&&newElement.setAttribute(e,t)}if(recipe.class&&newElement.setAttribute("class",recipe.class),recipe.id&&newElement.setAttribute("id",recipe.id),recipe.override_attr)for(const key in recipe.override_attr)newElement.setAttribute(key,eval(recipe.override_attr[key]));if(recipe.children&&recipe.children.length>0)for(const e of recipe.children){const t=e.direct_child?`:scope > ${e.selector}`:e.selector,n=element.querySelectorAll(t);n.forEach(((t,n)=>{const r=processElement(t,e,parentName,n);if(newElement.appendChild(r),e.insert_split_marker&&n%(e.insert_split_marker_every||1)==0){const e=document.createElement("split-marker");newElement.appendChild(e)}if(e.insert_split_marker){const e=document.createElement("split-marker");newElement.appendChild(e)}else console.log("no split marker")}))}if(recipe.empty_message&&0===newElement.children.length){const e=document.createTextNode(recipe.empty_message);newElement.appendChild(e)}return newElement}__webpack_require__.d(__webpack_exports__,{q:()=>processElement})}},__webpack_module_cache__={};function __webpack_require__(e){var t=__webpack_module_cache__[e];if(void 0!==t)return t.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,t)=>{for(var n in t)__webpack_require__.o(t,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},__webpack_require__.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);var __webpack_exports__={},_utils_element_processor__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(723),__awaiter=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function c(e){try{a(r.next(e))}catch(e){i(e)}}function l(e){try{a(r.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(c,l)}a((r=r.apply(e,t||[])).next())}))};let lastScrollTime=0;const SCROLL_THRESHOLD=1500;function generateSelector(e){if(e.id)return`#${e.id}`;let t=[],n=e;for(;n&&n!==document.body&&n.parentElement;){let e=n.tagName.toLowerCase();n.className&&"string"==typeof n.className&&(e+="."+n.className.trim().replace(/\s+/g,"."));let r=n,o=1;for(;r.previousElementSibling;)r=r.previousElementSibling,r.tagName===n.tagName&&o++;o>1&&(e+=`:nth-of-type(${o})`),t.unshift(e),n=n.parentElement}return t.join(" > ")}function setupClickInterception(){console.log("setupClickInterception");const e=EventTarget.prototype.addEventListener;EventTarget.prototype.addEventListener=function(t,n,r){if("click"===t){console.log("Intercepting click event listener");const o=function(e){try{const e=(new Date).toISOString();console.log("Captured click event"),captureInteraction("click_new",this,e,generateSelector(this),this.id||"",window.location.href)}catch(e){console.error("Error in click listener:",e)}"function"==typeof n?n.call(this,e):n&&"function"==typeof n.handleEvent&&n.handleEvent.call(n,e)};return e.call(this,t,o,r)}return e.call(this,t,n,r)}}function generateHtmlSnapshotId(){const e=window.location.href,t=(new Date).toISOString();return`html_${hashCode(e)}_${t}`}function hashCode(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return console.log("Hash value before return:",t),t.toString()}function getClickableElementsInViewport(){const e=[];return document.querySelectorAll('a, button, [onclick], input[type="button"], input[type="submit"]').forEach((t=>{const n=t.getBoundingClientRect();n.top>=0&&n.left>=0&&n.bottom<=(window.innerHeight||document.documentElement.clientHeight)&&n.right<=(window.innerWidth||document.documentElement.clientWidth)&&e.push({tagName:t.tagName,className:t.className,id:t.id,innerText:t.innerText.trim(),outerHTML:t.outerHTML.trim()})})),e}function captureInteraction(e,t,n,r,o,i){return __awaiter(this,void 0,void 0,(function*(){try{const c=generateHtmlSnapshotId();yield new Promise(((e,t)=>{chrome.storage.local.get(["htmlSnapshots"],(n=>{const r=n.htmlSnapshots||{};r[c]=document.documentElement.outerHTML,chrome.storage.local.set({htmlSnapshots:r},(()=>{chrome.runtime.lastError?t(chrome.runtime.lastError):e(void 0)}))}))}));const l={eventType:e,timestamp:n,target:t,targetOuterHTML:t.outerHTML,targetClass:t.className,targetId:t.id,targetText:t.innerText||t.value||"",htmlSnapshotId:c,selector:r||"",clickableId:o||"",url:i||""};yield chrome.runtime.sendMessage({action:"saveData",data:l})}catch(t){console.error(`Error during ${e} event handling:`,t)}}))}function getUniqueSelector(e){if(e.id)return`#${e.id}`;if(e.className){const t=e.className.trim().split(/\s+/).join(".");return`${e.tagName.toLowerCase()}.${t}`}return e.tagName.toLowerCase()}function getFullSelector(e){let t=[];for(;e.parentElement;)t.unshift(getUniqueSelector(e)),e=e.parentElement;return t.join(" > ")}function captureScreenshot(e){return __awaiter(this,void 0,void 0,(function*(){try{const t=`screenshot_${e}`;yield chrome.runtime.sendMessage({action:"captureScreenshot",screenshotId:t})}catch(e){console.error("Error capturing screenshot:",e)}}))}setupClickInterception(),document.addEventListener("DOMContentLoaded",(()=>__awaiter(void 0,void 0,void 0,(function*(){console.log("DOMContentLoaded");const e=window.location.href;try{const t=yield new Promise((t=>{chrome.runtime.sendMessage({action:"getRecipe",url:e},t)}));if(console.log("response"),t&&t.recipe){const e=t.recipe,n=document.querySelector(e.selector);if(n){const t=(0,_utils_element_processor__WEBPACK_IMPORTED_MODULE_0__.q)(n,e);console.log(t.outerHTML)}}}catch(e){console.error("Error initializing clickable elements:",e)}})))),document.addEventListener("scroll",(e=>__awaiter(void 0,void 0,void 0,(function*(){try{const t=Date.now();if(t-lastScrollTime>=SCROLL_THRESHOLD){lastScrollTime=t;const n=(new Date).toISOString();yield captureInteraction("scroll",e.target,n,"","",""),yield captureScreenshot(n)}}catch(e){console.error("Error during scroll event handling:",e)}})))),document.addEventListener("blur",(e=>__awaiter(void 0,void 0,void 0,(function*(){const t=e.target;if(t&&("INPUT"===t.tagName&&"text"===t.type||"TEXTAREA"===t.tagName)){const e=(new Date).toISOString();yield captureScreenshot(e),yield captureInteraction("input",t,e,"","","")}}))),!0),document.addEventListener("DOMContentLoaded",(()=>{document.querySelectorAll('input[id="placeOrder"], input[id="turbo-checkout-pyo-button"]');const e=document.querySelector('input[id="buy-now-button"]'),t=document.querySelector('button[id="rcx-subscribe-submit-button-announce"]'),n=document.querySelector('input[name="proceedToRetailCheckout"]');[e,t].forEach((e=>{e&&e.addEventListener("click",(()=>__awaiter(void 0,void 0,void 0,(function*(){var t,n,r,o,i;try{const c={title:(null===(n=null===(t=document.querySelector("#title"))||void 0===t?void 0:t.innerText)||void 0===n?void 0:n.trim())||"",price:(null===(o=null===(r=document.querySelector("span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay"))||void 0===r?void 0:r.innerText)||void 0===o?void 0:o.trim())||"",asin:(null===(i=document.querySelector("input#ASIN"))||void 0===i?void 0:i.value)||"",options:{}};Array.from(document.querySelectorAll("#twister div.a-row:has(label.a-form-label):has(span.selection)")).forEach((e=>{var t,n,r;const o=(null===(n=null===(t=e.querySelector("label.a-form-label"))||void 0===t?void 0:t.innerText)||void 0===n?void 0:n.replace(": ",""))||"",i=(null===(r=e.querySelector("span.selection"))||void 0===r?void 0:r.innerText)||"";o&&i&&(c.options[o]=i)})),console.log(`${e.id} clicked - Product Info:`,c);const l=(yield chrome.storage.local.get({orderDetails:[]})).orderDetails||[];l.push({name:c.title,price:parseFloat(c.price.replace(/[^0-9.]/g,"")),asin:c.asin,options:c.options}),yield chrome.storage.local.set({orderDetails:l})}catch(t){console.error(`Error capturing ${e.id} product info:`,t)}}))))})),n&&n.addEventListener("click",(e=>__awaiter(void 0,void 0,void 0,(function*(){var e,t,n;try{const r=[],o=Array.from(document.querySelectorAll('[id^="sc-active-"]')).filter((e=>"sc-active-cart"!==e.id));for(const i of o){const o=i.querySelector('input[type="checkbox"]');if(o&&o.checked){const o=i.querySelector(".sc-item-product-title-cont .sc-product-link");if(o){const c=o.querySelector(".a-truncate-full"),l=(null===(e=null==c?void 0:c.textContent)||void 0===e?void 0:e.trim())||"",a=(null===(t=(o.getAttribute("href")||"").match(/product\/([A-Z0-9]{10})/))||void 0===t?void 0:t[1])||"",s=i.querySelector(".sc-item-price-block .a-offscreen"),m=s?parseFloat((null===(n=s.textContent)||void 0===n?void 0:n.replace(/[^0-9.]/g,""))||"0"):0,d={};i.querySelectorAll(".sc-product-variation").forEach((e=>{var t,n,r,o;const i=(null===(n=null===(t=e.querySelector(".a-text-bold"))||void 0===t?void 0:t.textContent)||void 0===n?void 0:n.trim().replace(":",""))||"",c=(null===(o=null===(r=e.querySelector(".a-size-small:not(.a-text-bold)"))||void 0===r?void 0:r.textContent)||void 0===o?void 0:o.trim())||"";i&&c&&(d[i]=c)})),r.push({name:l,asin:a,price:m,options:d})}}}if(r.length>0){const e=((yield chrome.storage.local.get({orderDetails:[]})).orderDetails||[]).concat(r);yield chrome.storage.local.set({orderDetails:e}),console.log("Stored selected cart items:",r)}}catch(e){console.error("Error capturing selected cart items:",e)}}))))})),chrome.runtime.onMessage.addListener(((e,t,n)=>("getHTML"===e.action&&n({html:document.documentElement.outerHTML}),!0)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,