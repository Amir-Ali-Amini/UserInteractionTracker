({277:function(){var e=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))((function(r,a){function i(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}c((o=o.apply(e,t||[])).next())}))};const t=EventTarget.prototype.addEventListener;console.log("start");let n=0;function o(e){if(e.id)return`#${e.id}`;let t=[],n=e;for(;n&&n!==document.body&&n.parentElement;){let e=n.tagName.toLowerCase();n.className&&"string"==typeof n.className&&(e+="."+n.className.trim().replace(/\s+/g,"."));let o=n,r=1;for(;o.previousElementSibling;)o=o.previousElementSibling,o.tagName===n.tagName&&r++;r>1&&(e+=`:nth-of-type(${r})`),t.unshift(e),n=n.parentElement}return t.join(" > ")}function r(e,t,n,o,r){const a=function e(t,n=0){return!t||n>=5?null:t.hasAttribute("data-clickable-id")?t:e(t.parentElement,n+1)}(t),i=a&&a.getAttribute("data-clickable-id")||"",s=function(){const e=window.location.href,t=(new Date).toISOString();return`html_${function(e){let t=0;for(let n=0;n<e.length;n++)t=(t<<5)-t+e.charCodeAt(n),t|=0;return console.log("Hash value before return:",t),t.toString()}(e)}_${t}`}();return{eventType:e,timestamp:n,target:{tagName:t.tagName,className:t.className,id:t.id,innerText:t.innerText||t.value||"",outerHTML:t.outerHTML},targetOuterHTML:t.outerHTML,targetClass:t.className,targetId:t.id,targetText:t.innerText||t.value||"",htmlSnapshotId:s,selector:o||"",clickableId:i||"",url:r||"",htmlContent:document.documentElement.outerHTML}}EventTarget.prototype.addEventListener=function(a,i,s){if(console.log("[Monkey Patch] Adding event listener for type:",a),"click"===a&&i){const c=function(t){return e(this,void 0,void 0,(function*(){const e=Date.now();if(e-n<150)return void console.log("[Monkey Patch] Debouncing click event");n=e,console.log("[Monkey Patch] Click detected on:",t.target);const a=(new Date).toISOString(),s=t.target.closest("a");if(s&&s.href&&"a"===s.tagName.toLowerCase()&&!s.href.startsWith("javascript:")){t.preventDefault(),t.stopPropagation();const e=s.href;try{const n=new Promise(((e,t)=>{function n(o){"SCREENSHOT_COMPLETE"===o.data.type&&o.data.timestamp===a&&(window.removeEventListener("message",n),o.data.success?e(void 0):t(new Error(o.data.error||"Screenshot failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),t(new Error("Screenshot timeout"))}),3e3)})),i=new Promise(((e,t)=>{function n(o){"INTERACTION_COMPLETE"===o.data.type&&o.data.timestamp===a&&(window.removeEventListener("message",n),o.data.success?e(void 0):t(new Error(o.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),t(new Error("Interaction timeout"))}),3e3)})),s=r("click_a",t.target,a,o(t.target),window.location.href);window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:a},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:s},"*"),yield n,yield i,window.location.href=e}catch(t){console.error("Error:",t),window.location.href=e}}else try{const e=new Promise(((e,t)=>{function n(o){"SCREENSHOT_COMPLETE"===o.data.type&&o.data.timestamp===a&&(window.removeEventListener("message",n),o.data.success?e(void 0):t(new Error(o.data.error||"Screenshot failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),t(new Error("Screenshot timeout"))}),3e3)})),n=r("click_b",t.target,a,o(t.target),window.location.href);window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:a},"*"),window.postMessage({type:"SAVE_INTERACTION_DATA",data:n},"*");const s=new Promise(((e,t)=>{function n(o){"INTERACTION_COMPLETE"===o.data.type&&o.data.timestamp===a&&(window.removeEventListener("message",n),o.data.success?e(void 0):t(new Error(o.data.error||"Interaction failed")))}window.addEventListener("message",n),setTimeout((()=>{window.removeEventListener("message",n),t(new Error("Interaction timeout"))}),3e3)}));yield e,yield s,"function"==typeof i?i.call(this,t):i&&"function"==typeof i.handleEvent&&i.handleEvent.call(i,t)}catch(e){console.error("Error capturing screenshot:",e),"function"==typeof i?i.call(this,t):i&&"function"==typeof i.handleEvent&&i.handleEvent.call(i,t)}}))};return t.call(this,a,c,s)}return t.call(this,a,i,s)},console.log("[Monkey Patch] addEventListener successfully patched."),document.addEventListener("click",(function(t){return e(this,void 0,void 0,(function*(){const e=Date.now();if(e-n<150)return void console.log("[Monkey Patch] Debouncing anchor click event");n=e;const a=t.target,i=a.closest("a");if(i&&"a"===i.tagName.toLowerCase()&&i.href&&(console.log("[Intercepted] Click on <a> tag:",i.href),!i.href.startsWith("javascript:"))){t.preventDefault(),t.stopPropagation();const e=(new Date).toISOString(),n=i.href;try{const i=new Promise(((t,n)=>{function o(r){"SCREENSHOT_COMPLETE"===r.data.type&&r.data.timestamp===e&&(window.removeEventListener("message",o),r.data.success?t(void 0):n(new Error(r.data.error||"Screenshot failed")))}window.addEventListener("message",o),setTimeout((()=>{window.removeEventListener("message",o),n(new Error("Screenshot timeout"))}),3e3)}));window.postMessage({type:"CAPTURE_SCREENSHOT",timestamp:e},"*");const s=r("click_c",t.target,e,o(a),window.location.href);window.postMessage({type:"SAVE_INTERACTION_DATA",data:s},"*");const c=new Promise(((t,n)=>{function o(r){"INTERACTION_COMPLETE"===r.data.type&&r.data.timestamp===e&&(window.removeEventListener("message",o),r.data.success?t(void 0):n(new Error(r.data.error||"Interaction failed")))}window.addEventListener("message",o),setTimeout((()=>{window.removeEventListener("message",o),n(new Error("Interaction timeout"))}),3e3)}));yield i,yield c,window.location.href=n}catch(e){console.error("Error capturing screenshot:",e),window.location.href=n}}}))}),!0)}})[277]();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,