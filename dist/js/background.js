(()=>{"use strict";const e={selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input"},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},t=[{match:"/",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e,{selector:"#s-refinements",name:"refinements",children:[{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"ul:nth-of-type(1) > span.a-declarative > span > li",add_text:!0,name:"from_text",clickable:!0,click_selector:"a",direct_child:!0,children:[{selector:"input[type='checkbox']"}]}]},{selector:"#departments",name:"departments",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0}]},{selector:"#reviewsRefinements",name:"reviews_refinements",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0}]}]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-size-base-plus.a-color-base.a-text-normal",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a",add_text:!0,class:"product-name",clickable:!0,name:"view_product"},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count"}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal > span.a-price > span.a-offscreen",add_text:!0}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"}]}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]}]}]},{match:"#productTitle",match_text:"",selector:"html",terminate:"return !!arguments[0]",terminate_callback:"return arguments[0]",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"]},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:"#apex_desktop_newAccordionRow #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay",add_text:!0,text_format:"Price: {}",class:"product-price"},{selector:"#twister",class:"product-options",children:[{selector:"div.a-row:has(label.a-form-label):has(span.selection)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]}]}]},{selector:"#addToCart:has(#buy-now-button)",name:"add_to_cart",children:[{selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},{selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},{selector:"#buy-now-button",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now",before_hook:'\nconst title = document.querySelector("#title").innerText\nconst price = document.querySelector("span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay").innerText\nconst options = Array.from(document.querySelectorAll("#twister div.a-row:has(label.a-form-label):has(span.selection)")).map(a => ({label: a.querySelector("label.a-form-label").innerText, value: a.querySelector("span.selection").innerText}))\nconst options_dict = {}\nfor (const option of options) {\n    options_dict[option["label"].replace(": ", "")] = option["value"]\n}\nconst asin = document.querySelector("input#ASIN").value\nconsole.log({title, price, options: options_dict, asin})\nreturn {title, price, options: options_dict, asin}\n'}]}]}]},{match:"/ap/signin",match_method:"url",terminate:"return !!arguments[0]",terminate_callback:"return arguments[0]",selector:"html"}];var o=function(e,t,o,r){return new(o||(o=Promise))((function(a,n){function c(e){try{l(r.next(e))}catch(e){n(e)}}function s(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(c,s)}l((r=r.apply(e,t||[])).next())}))};chrome.webNavigation.onCommitted.addListener((e=>{0===e.frameId&&chrome.scripting.executeScript({target:{tabId:e.tabId},files:["js/injected.js"],world:"MAIN"})}),{url:[{urlMatches:".*"}]});let r="http://userdatacollect.hailab.io/upload",a=[],n=[],c=0;const s={};function l(e,t){return o(this,void 0,void 0,(function*(){if(e){if(n.push([e,t]),n.length>100){let e=yield chrome.storage.local.get({screenshots:[]});e=e.screenshots||[];const t=e.concat(n);n.length=0,yield chrome.storage.local.set({screenshots:t})}return!0}return!1}))}function i(e){let t=0;for(let o=0;o<e.length;o++)t=(t<<5)-t+e.charCodeAt(o),t|=0;return console.log("Hash value before return:",t),t.toString()}chrome.runtime.onMessage.addListener(((e,s,i)=>(o(void 0,void 0,void 0,(function*(){var d;try{if("saveData"===e.action){if(console.log("saveData ",e.data.eventType),c++,console.log(c),e.data.actionSequenceId=c,a.push(e.data),a.length>100){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(a);a.length=0,yield chrome.storage.local.set({interactions:t})}i({success:!0})}if("captureScreenshot"===e.action){console.log("get screenshot request");const t=yield function(){return o(this,void 0,void 0,(function*(){try{const[e]=yield chrome.tabs.query({active:!0,currentWindow:!0});if(e)return yield chrome.tabs.captureVisibleTab(e.windowId,{format:"jpeg",quality:25})}catch(e){console.error("Error capturing screenshot:",e)}return null}))}();if(t){const o=yield l(t,e.screenshotId);i({success:o,message:o?void 0:"Failed to capture screenshot"})}else i({success:!1,message:"Failed to capture screenshot"})}if("downloadData"===e.action)try{console.log("downloadData");const e=yield function(){return o(this,void 0,void 0,(function*(){try{const e=(new Date).toISOString().replace(/[:.]/g,"-"),t=`DATA/SESSION_${e}`,o=(yield chrome.storage.local.get({userId:""})).userId,c=yield chrome.storage.local.get({htmlSnapshots:[]}),s=yield chrome.storage.local.get({interactions:[]}),l=yield chrome.storage.local.get({orderDetails:[]}),i=yield chrome.storage.local.get({screenshots:[]});console.log("snapshots",c.htmlSnapshots.length),console.log("interact",s),console.log("orderDetails",l),console.log("screen",i.screenshots.length);let d=c.htmlSnapshots||{},h=s.interactions||[],u=l.orderDetails||[],m=i.screenshots||[];h=h.concat(a),m=m.concat(n);const p={htmlSnapshots:d,interactions:h,orderDetails:u},g=new Blob([`Session data for timestamp: ${e}, user id: ${o} \n order details: \n ${JSON.stringify(u)}`],{type:"text/plain"}),f=new FormData;f.append("file",g,`${t}/session_info.txt`),console.log("uploading session info"),yield fetch(r,{method:"POST",body:f});const b=new Blob([JSON.stringify(p,null,2)],{type:"application/json"}),y=new FormData;console.log("uploading interactions"),y.append("file",b,`${t}/interactions.json`),yield fetch(r,{method:"POST",body:y});for(const[e,o]of m){const a=yield fetch(e),n=yield a.blob(),c=new FormData;c.append("file",n,`${t}/${o.replace(/[:.]/g,"-")}.jpg`),console.log("uploading screenshots"),yield fetch(r,{method:"POST",body:c})}return chrome.storage.local.remove(["htmlSnapshots","interactions","orderDetails","screenshots"]),a.length=0,n.length=0,!0}catch(e){return console.error("Error uploading data:",e),!1}}))}();i({success:e})}catch(e){console.error("Error handling download:",e),i({success:!1,error:e.message})}if("clearMemoryCache"===e.action&&(a=[],n=[],c=0,i({success:!0})),"getRecipe"===e.action&&(null===(d=s.tab)||void 0===d?void 0:d.id))return function(e,r){return o(this,void 0,void 0,(function*(){const o=new URL(r).pathname;for(const r of t){const t=r.match_method||"text";if("text"===t)try{const[{result:t}]=yield chrome.scripting.executeScript({target:{tabId:e},func:(e,t)=>{var o,r;const a=document.querySelector(e);return a&&(!t||null!==(r=null===(o=a.textContent)||void 0===o?void 0:o.toLowerCase().includes(t.toLowerCase()))&&void 0!==r&&r)},args:[r.match,r.match_text||""]});if(t)return r}catch(e){console.error("Error checking text match:",e)}else if("url"===t&&r.match===o)return r}throw new Error(`No matching recipe found for path: ${o}`)}))}(s.tab.id,e.url).then((e=>{i({recipe:e})})).catch((e=>{i({error:e.message})})),!0}catch(e){console.error("Error handling message:",e),i({success:!1,error:e.message})}})),!0))),chrome.tabs.onActivated.addListener((e=>o(void 0,void 0,void 0,(function*(){try{const t=e.tabId,r=yield chrome.tabs.get(t);if(!r)return void console.error(`Failed to get tab with ID: ${t}`);if(console.log(`Switched to tab ${t} with URL: ${r.url}`),r.url&&r.url.includes("amazon.com")){const e=(new Date).toISOString(),n=`html_${i(r.url)}_${e}`;chrome.tabs.sendMessage(t,{action:"getHTML"},(t=>o(void 0,void 0,void 0,(function*(){const o=null==t?void 0:t.html,s=(yield chrome.storage.local.get({htmlSnapshots:{}})).htmlSnapshots||{};s[n]=o,yield chrome.storage.local.set({htmlSnapshots:s}),c++;const i={eventType:"tabActivate",timestamp:e,target_url:r.url,htmlSnapshotId:n,actionSequenceId:c};if(a.push(i),a.length>100){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(a);a.length=0,yield chrome.storage.local.set({interactions:t})}const d=yield chrome.tabs.captureVisibleTab(r.windowId,{format:"jpeg",quality:25}),h=`screenshot_${e}`;yield l(d,h)}))))}}catch(e){console.error("Error in tab activate handler:",e)}})))),chrome.webNavigation.onCommitted.addListener((e=>o(void 0,void 0,void 0,(function*(){if(0===e.frameId&&(console.log("webNavigation onCommitted event triggered:",e),e.url.includes("amazon.com"))){const t=function(e,t){s[e]||(s[e]={backStack:[],forwardStack:[],currentUrl:null});const o=s[e];return o.currentUrl?o.currentUrl===t?"reload":o.backStack.length>0&&o.backStack[o.backStack.length-1]===t?(o.forwardStack.push(o.currentUrl),o.currentUrl=o.backStack.pop(),"back"):o.forwardStack.length>0&&o.forwardStack[o.forwardStack.length-1]===t?(o.backStack.push(o.currentUrl),o.currentUrl=o.forwardStack.pop(),"forward"):(o.backStack.push(o.currentUrl),o.forwardStack=[],o.currentUrl=t,"new"):(o.currentUrl=t,"new")}(e.tabId,e.url);console.log(`Navigation type: ${t} for tab ${e.tabId} to ${e.url}`),chrome.scripting.executeScript({target:{tabId:e.tabId},func:()=>document.documentElement.outerHTML},(r=>o(void 0,void 0,void 0,(function*(){if(r&&r[0]&&r[0].result){const o=r[0].result,n=(new Date).toISOString(),s=`html_${i(e.url)}_${n}`,d=(yield chrome.storage.local.get({htmlSnapshots:{}})).htmlSnapshots||{};d[s]=o,yield chrome.storage.local.set({htmlSnapshots:d}),c++;const h={eventType:"navigation",navigationType:t,timestamp:n,target_url:e.url,htmlSnapshotId:s,actionSequenceId:c};if(a.push(h),a.length>100){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(a);a.length=0,yield chrome.storage.local.set({interactions:t})}const u=yield chrome.tabs.get(e.tabId),m=yield chrome.tabs.captureVisibleTab(u.windowId,{format:"jpeg",quality:25}),p=`screenshot_${n}`;yield l(m,p)}}))))}})))),chrome.tabs.onRemoved.addListener((e=>{delete s[e]}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,