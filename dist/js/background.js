(()=>{"use strict";const e={selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input"},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},t=[{match:"/",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e,{selector:"#s-refinements",name:"refinements",children:[{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"ul:nth-of-type(1) > span.a-declarative > span > li",add_text:!0,name:"from_text",clickable:!0,click_selector:"a",direct_child:!0,children:[{selector:"input[type='checkbox']"}]}]},{selector:"#departments",name:"departments",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0}]},{selector:"#reviewsRefinements",name:"reviews_refinements",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0}]}]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-size-base-plus.a-color-base.a-text-normal",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a",add_text:!0,class:"product-name",clickable:!0,name:"view_product"},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count"}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal > span.a-price > span.a-offscreen",add_text:!0}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"}]}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]}]}]},{match:"#productTitle",match_text:"",selector:"html",terminate:"return !!arguments[0]",terminate_callback:"return arguments[0]",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"]},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:"#apex_desktop_newAccordionRow #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay",add_text:!0,text_format:"Price: {}",class:"product-price"},{selector:"#twister",class:"product-options",children:[{selector:"div.a-row:has(label.a-form-label):has(span.selection)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]}]}]},{selector:"#addToCart:has(#buy-now-button)",name:"add_to_cart",children:[{selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},{selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},{selector:"#buy-now-button",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now",before_hook:'\nconst title = document.querySelector("#title").innerText\nconst price = document.querySelector("span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay").innerText\nconst options = Array.from(document.querySelectorAll("#twister div.a-row:has(label.a-form-label):has(span.selection)")).map(a => ({label: a.querySelector("label.a-form-label").innerText, value: a.querySelector("span.selection").innerText}))\nconst options_dict = {}\nfor (const option of options) {\n    options_dict[option["label"].replace(": ", "")] = option["value"]\n}\nconst asin = document.querySelector("input#ASIN").value\nconsole.log({title, price, options: options_dict, asin})\nreturn {title, price, options: options_dict, asin}\n'}]}]}]},{match:"/ap/signin",match_method:"url",terminate:"return !!arguments[0]",terminate_callback:"return arguments[0]",selector:"html"}];var o=function(e,t,o,r){return new(o||(o=Promise))((function(a,c){function s(e){try{l(r.next(e))}catch(e){c(e)}}function n(e){try{l(r.throw(e))}catch(e){c(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(s,n)}l((r=r.apply(e,t||[])).next())}))};let r=[],a=[];chrome.runtime.onMessage.addListener(((e,t,c)=>(o(void 0,void 0,void 0,(function*(){try{if("saveData"===e.action){if(console.log("saveData ",e.data.eventType),r.push(e.data),r.length>10){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(r);r.length=0,yield chrome.storage.local.set({interactions:t})}c({success:!0})}if("captureScreenshot"===e.action){const t=yield function(){return o(this,void 0,void 0,(function*(){try{const[e]=yield chrome.tabs.query({active:!0,currentWindow:!0});if(e)return yield chrome.tabs.captureVisibleTab(e.windowId,{format:"jpeg",quality:50})}catch(e){console.error("Error capturing screenshot:",e)}return null}))}();if(t){if(a.push([t,e.screenshotId]),a.length>10){let e=yield chrome.storage.local.get({screenshots:[]});e=e.screenshots||[];const t=e.concat(a);a.length=0,yield chrome.storage.local.set({screenshots:t})}c({success:!0})}else c({success:!1,message:"Failed to capture screenshot"})}if("downloadData"===e.action){const e=(new Date).toISOString().replace(/[:.]/g,"-"),t=`DATA/SESSION_${e}`;chrome.downloads.download({url:"data:text/plain;charset=utf-8,"+encodeURIComponent(`Session data for timestamp: ${e}`),filename:`${t}/session_info.txt`,saveAs:!1},(e=>o(void 0,void 0,void 0,(function*(){let e=(yield chrome.storage.local.get({htmlSnapshots:[]})).htmlSnapshots||{};chrome.storage.local.remove("htmlSnapshots"),console.log(e);const o=yield chrome.storage.local.get({interactions:[]});chrome.storage.local.remove("interactions");let s=o.interactions||[];console.log(s),s=s.concat(r),r.length=0;let n=(yield chrome.storage.local.get({orderDetails:[]})).orderDetails||[];chrome.storage.local.remove("orderDetails");const l={htmlSnapshots:e,interactions:s,orderDetails:n},i=JSON.stringify(l,null,2);chrome.downloads.download({url:"data:text/json;charset=utf-8,"+encodeURIComponent(i),filename:`${t}/interactions.json`,saveAs:!1});const d=yield chrome.storage.local.get({screenshots:[]});chrome.storage.local.remove("screenshots");let h=d.screenshots||[];h=h.concat(a),console.log(h),a.length=0,h.forEach(((e,o)=>{console.log(e);const r=`${t}/${e[1].replace(/[:.]/g,"-")}.jpg`;chrome.downloads.download({url:e[0],filename:r,saveAs:!1})})),c({success:!0}),chrome.storage.local.clear()}))))}"clearCache"===e.action&&(chrome.storage.local.clear(),c({success:!0}))}catch(e){chrome.storage.local.clear(),console.error("Error handling message:",e),c({success:!1,error:e.message})}})),!0))),chrome.runtime.onMessage.addListener(((e,r,a)=>{var c;if("getRecipe"===e.action&&(null===(c=r.tab)||void 0===c?void 0:c.id))return function(e,r){return o(this,void 0,void 0,(function*(){const o=new URL(r).pathname;for(const r of t){const t=r.match_method||"text";if("text"===t)try{const[{result:t}]=yield chrome.scripting.executeScript({target:{tabId:e},func:(e,t)=>{var o,r;const a=document.querySelector(e);return a&&(!t||null!==(r=null===(o=a.textContent)||void 0===o?void 0:o.toLowerCase().includes(t.toLowerCase()))&&void 0!==r&&r)},args:[r.match,r.match_text||""]});if(t)return r}catch(e){console.error("Error checking text match:",e)}else if("url"===t&&r.match===o)return r}throw new Error(`No matching recipe found for path: ${o}`)}))}(r.tab.id,e.url).then((e=>{a({recipe:e})})).catch((e=>{a({error:e.message})})),!0}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,