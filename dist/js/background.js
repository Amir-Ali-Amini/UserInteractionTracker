(()=>{"use strict";const e={selector:"#nav-search-bar-form",children:[{selector:"input#twotabsearchtextbox",name:"search_input"},{selector:"#nav-search-submit-button",clickable:!0,name:"search_button"}]},t=[{match:"/",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e]}]},{match:"/s",match_method:"url",selector:"html",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e,{selector:"#s-refinements",name:"refinements",children:[{selector:"div.a-section.a-spacing-none:not(:has(#n-title)):has(span.a-size-base.a-color-base.puis-bold-weight-text):has(ul span.a-declarative > span > li):not(#reviewsRefinements):not(#departments):not(#priceRefinements):not(#filters)",name:"from_text",text_selector:"span.a-size-base.a-color-base.puis-bold-weight-text",children:[{selector:"span.a-size-base.a-color-base.puis-bold-weight-text",add_text:!0,class:"refinement-title"},{selector:"ul:nth-of-type(1) > span.a-declarative > span > li",add_text:!0,name:"from_text",clickable:!0,click_selector:"a",direct_child:!0,children:[{selector:"input[type='checkbox']"}]}]},{selector:"#departments",name:"departments",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0}]},{selector:"#reviewsRefinements",name:"reviews_refinements",children:[{selector:"li a",add_text:!0,name:"from_text",clickable:!0}]}]},{selector:"div.s-main-slot.s-result-list.s-search-results",name:"search_results",children:[{insert_split_marker:!0,insert_split_marker_every:4,selector:'div[data-component-type="s-search-result"]',text_selector:"span.a-size-base-plus.a-color-base.a-text-normal",name:"from_text",class:"search-result",children:[{selector:"div[data-cy='title-recipe'] a",add_text:!0,class:"product-name",clickable:!0,name:"view_product"},{selector:"div[data-cy='reviews-block']",class:"product-review",children:[{selector:"span.a-icon-alt",add_text:!0,class:"product-rating"},{selector:"span.a-size-base.s-underline-text",add_text:!0,text_format:"{} reviews",class:"product-rating-count"}]},{selector:"div[data-cy='price-recipe']",class:"product-price",children:[{selector:"a.a-link-normal > span.a-price > span.a-offscreen",add_text:!0}]},{selector:"div[data-cy='delivery-recipe']",add_text:!0,class:"product-delivery"}]}]},{selector:"span.s-pagination-strip",name:"pagination",children:[{selector:".s-pagination-item",add_text:!0,name:"from_text",clickable:!0}]}]}]},{match:"#productTitle",match_text:"",selector:"html",terminate:"return !!arguments[0]",terminate_callback:"return arguments[0]",children:[{selector:"head",children:[{selector:"title",add_text:!0}]},{selector:"body",children:[e,{selector:"#centerCol",class:"product-card",children:[{selector:"#title",add_text:!0,keep_attr:["id"]},{selector:"#averageCustomerReviews",class:"review",children:[{selector:"span.a-icon-alt",add_text:!0},{selector:"#acrCustomerReviewText",add_text:!0}]},{selector:"#apex_desktop_newAccordionRow #corePriceDisplay_desktop_feature_div span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay",add_text:!0,text_format:"Price: {}",class:"product-price"},{selector:"#twister",class:"product-options",children:[{selector:"div.a-row:has(label.a-form-label):has(span.selection)",children:[{selector:"label.a-form-label",add_text:!0},{selector:"span.selection",add_text:!0}]}]}]},{selector:"#addToCart:has(#buy-now-button)",name:"add_to_cart",children:[{selector:"#productFactsDesktopExpander",add_text:!0,class:"product-facts"},{selector:"div.mir-layout-DELIVERY_BLOCK-slot-PRIMARY_DELIVERY_MESSAGE_LARGE",add_text:!0,class:"product-delivery"},{selector:"#buy-now-button",add_text:!0,clickable:!0,name:"buy_now",class:"product-buy-now",before_hook:'\nconst title = document.querySelector("#title").innerText\nconst price = document.querySelector("span.a-price.aok-align-center.reinventPricePriceToPayMargin.priceToPay").innerText\nconst options = Array.from(document.querySelectorAll("#twister div.a-row:has(label.a-form-label):has(span.selection)")).map(a => ({label: a.querySelector("label.a-form-label").innerText, value: a.querySelector("span.selection").innerText}))\nconst options_dict = {}\nfor (const option of options) {\n    options_dict[option["label"].replace(": ", "")] = option["value"]\n}\nconst asin = document.querySelector("input#ASIN").value\nconsole.log({title, price, options: options_dict, asin})\nreturn {title, price, options: options_dict, asin}\n'}]}]}]},{match:"/ap/signin",match_method:"url",terminate:"return !!arguments[0]",terminate_callback:"return arguments[0]",selector:"html"}];var o=function(e,t,o,r){return new(o||(o=Promise))((function(a,n){function c(e){try{l(r.next(e))}catch(e){n(e)}}function s(e){try{l(r.throw(e))}catch(e){n(e)}}function l(e){var t;e.done?a(e.value):(t=e.value,t instanceof o?t:new o((function(e){e(t)}))).then(c,s)}l((r=r.apply(e,t||[])).next())}))};let r="http://userdatacollect.hailab.io/upload",a=[],n=[],c=0;const s={};function l(e,t){return o(this,void 0,void 0,(function*(){if(e){if(n.push([e,t]),n.length>10){let e=yield chrome.storage.local.get({screenshots:[]});e=e.screenshots||[];const t=e.concat(n);n.length=0,yield chrome.storage.local.set({screenshots:t})}return!0}return!1}))}function i(e){let t=0;for(let o=0;o<e.length;o++)t=(t<<5)-t+e.charCodeAt(o),t|=0;return console.log("Hash value before return:",t),t.toString()}chrome.runtime.onMessage.addListener(((e,s,i)=>(o(void 0,void 0,void 0,(function*(){var d;try{if("saveData"===e.action){if(console.log("saveData ",e.data.eventType),c++,e.data.actionSequenceId=c,a.push(e.data),a.length>10){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(a);a.length=0,yield chrome.storage.local.set({interactions:t})}i({success:!0})}if("captureScreenshot"===e.action){const t=yield function(){return o(this,void 0,void 0,(function*(){try{const[e]=yield chrome.tabs.query({active:!0,currentWindow:!0});if(e)return yield chrome.tabs.captureVisibleTab(e.windowId,{format:"jpeg",quality:25})}catch(e){console.error("Error capturing screenshot:",e)}return null}))}();if(t){const o=yield l(t,e.screenshotId);i({success:o,message:o?void 0:"Failed to capture screenshot"})}else i({success:!1,message:"Failed to capture screenshot"})}if("downloadData"===e.action)try{console.log("downloadData");const e=yield function(){return o(this,void 0,void 0,(function*(){try{const e=(new Date).toISOString().replace(/[:.]/g,"-"),t=`DATA/SESSION_${e}`,o=(yield chrome.storage.local.get({userId:""})).userId,c=yield chrome.storage.local.get({htmlSnapshots:[]}),s=yield chrome.storage.local.get({interactions:[]}),l=yield chrome.storage.local.get({orderDetails:[]}),i=yield chrome.storage.local.get({screenshots:[]});let d=c.htmlSnapshots||{},h=s.interactions||[],u=l.orderDetails||[],m=i.screenshots||[];h=h.concat(a),m=m.concat(n);const p={htmlSnapshots:d,interactions:h,orderDetails:u},g=new Blob([`Session data for timestamp: ${e}, user id: ${o}`],{type:"text/plain"}),f=new FormData;f.append("file",g,`${t}/session_info.txt`),console.log("uploading session info"),yield fetch(r,{method:"POST",body:f});const b=new Blob([JSON.stringify(p,null,2)],{type:"application/json"}),y=new FormData;console.log("uploading interactions"),y.append("file",b,`${t}/interactions.json`),yield fetch(r,{method:"POST",body:y});for(const[e,o]of m){const a=yield fetch(e),n=yield a.blob(),c=new FormData;c.append("file",n,`${t}/${o.replace(/[:.]/g,"-")}.jpg`),console.log("uploading screenshots"),yield fetch(r,{method:"POST",body:c})}return chrome.storage.local.remove(["htmlSnapshots","interactions","orderDetails","screenshots"]),a.length=0,n.length=0,!0}catch(e){return console.error("Error uploading data:",e),!1}}))}();i({success:e})}catch(e){console.error("Error handling download:",e),i({success:!1,error:e.message})}if("clearMemoryCache"===e.action&&(a=[],n=[],c=0,i({success:!0})),"getRecipe"===e.action&&(null===(d=s.tab)||void 0===d?void 0:d.id))return function(e,r){return o(this,void 0,void 0,(function*(){const o=new URL(r).pathname;for(const r of t){const t=r.match_method||"text";if("text"===t)try{const[{result:t}]=yield chrome.scripting.executeScript({target:{tabId:e},func:(e,t)=>{var o,r;const a=document.querySelector(e);return a&&(!t||null!==(r=null===(o=a.textContent)||void 0===o?void 0:o.toLowerCase().includes(t.toLowerCase()))&&void 0!==r&&r)},args:[r.match,r.match_text||""]});if(t)return r}catch(e){console.error("Error checking text match:",e)}else if("url"===t&&r.match===o)return r}throw new Error(`No matching recipe found for path: ${o}`)}))}(s.tab.id,e.url).then((e=>{i({recipe:e})})).catch((e=>{i({error:e.message})})),!0}catch(e){console.error("Error handling message:",e),i({success:!1,error:e.message})}})),!0))),chrome.tabs.onActivated.addListener((e=>o(void 0,void 0,void 0,(function*(){try{const t=e.tabId,r=yield chrome.tabs.get(t);if(!r)return void console.error(`Failed to get tab with ID: ${t}`);if(console.log(`Switched to tab ${t} with URL: ${r.url}`),r.url&&r.url.includes("amazon.com")){const e=(new Date).toISOString(),n=`html_${i(r.url)}_${e}`;chrome.tabs.sendMessage(t,{action:"getHTML"},(t=>o(void 0,void 0,void 0,(function*(){const o=null==t?void 0:t.html,s=(yield chrome.storage.local.get({htmlSnapshots:{}})).htmlSnapshots||{};s[n]=o,yield chrome.storage.local.set({htmlSnapshots:s}),c++;const i={eventType:"tabActivate",timestamp:e,target_url:r.url,htmlSnapshotId:n,actionSequenceId:c};if(a.push(i),a.length>10){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(a);a.length=0,yield chrome.storage.local.set({interactions:t})}const d=yield chrome.tabs.captureVisibleTab(r.windowId,{format:"jpeg",quality:25}),h=`screenshot_${e}`;yield l(d,h)}))))}}catch(e){console.error("Error in tab activate handler:",e)}})))),chrome.webNavigation.onCommitted.addListener((e=>o(void 0,void 0,void 0,(function*(){if(0===e.frameId&&(console.log("webNavigation onCommitted event triggered:",e),e.url.includes("amazon.com"))){const t=function(e,t){s[e]||(s[e]={backStack:[],forwardStack:[],currentUrl:null});const o=s[e];return o.currentUrl?o.currentUrl===t?"reload":o.backStack.length>0&&o.backStack[o.backStack.length-1]===t?(o.forwardStack.push(o.currentUrl),o.currentUrl=o.backStack.pop(),"back"):o.forwardStack.length>0&&o.forwardStack[o.forwardStack.length-1]===t?(o.backStack.push(o.currentUrl),o.currentUrl=o.forwardStack.pop(),"forward"):(o.backStack.push(o.currentUrl),o.forwardStack=[],o.currentUrl=t,"new"):(o.currentUrl=t,"new")}(e.tabId,e.url);console.log(`Navigation type: ${t} for tab ${e.tabId} to ${e.url}`),chrome.scripting.executeScript({target:{tabId:e.tabId},func:()=>document.documentElement.outerHTML},(r=>o(void 0,void 0,void 0,(function*(){if(r&&r[0]&&r[0].result){const o=r[0].result,n=(new Date).toISOString(),s=`html_${i(e.url)}_${n}`,d=(yield chrome.storage.local.get({htmlSnapshots:{}})).htmlSnapshots||{};d[s]=o,yield chrome.storage.local.set({htmlSnapshots:d}),c++;const h={eventType:"navigation",navigationType:t,timestamp:n,target_url:e.url,htmlSnapshotId:s,actionSequenceId:c};if(a.push(h),a.length>10){let e=yield chrome.storage.local.get({interactions:[]});e=e.interactions||[];let t=e.concat(a);a.length=0,yield chrome.storage.local.set({interactions:t})}const u=yield chrome.tabs.get(e.tabId),m=yield chrome.tabs.captureVisibleTab(u.windowId,{format:"jpeg",quality:25}),p=`screenshot_${n}`;yield l(m,p)}}))))}})))),chrome.tabs.onRemoved.addListener((e=>{delete s[e]}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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eUYsZUFBZ0JBLEVBQ2hCMUUsVUFBV0EsRUFDWG9FLFdBQVlJLEVBQVFyQyxJQUNwQmtDLGVBQWdCTCxFQUNoQi9HLG9CQUdKLEdBREFGLEVBQWFRLEtBQUt5QixHQUNkakMsRUFBYVMsT0FoUVAsR0FnUW1DLENBQ3pDLElBQUlkLFFBQWVlLE9BQU9DLFFBQVFDLE1BQU1DLElBQUksQ0FBRWIsYUFBYyxLQUM1REwsRUFBU0EsRUFBT0ssY0FBZ0IsR0FDaEMsSUFBSW1DLEVBQW9CeEMsRUFBT29CLE9BQU9mLEdBQ3RDQSxFQUFhUyxPQUFTLFFBQ2hCQyxPQUFPQyxRQUFRQyxNQUFNSSxJQUFJLENBQUVoQixhQUFjbUMsR0FDbkQsQ0FFQSxNQUFNRSxRQUFZM0IsT0FBTzRCLEtBQUt6QixJQUFJNEcsRUFBUXRDLE9BQ3BDOUUsUUFBMEJLLE9BQU80QixLQUFLSSxrQkFBa0JMLEVBQUlNLFNBQVUsQ0FDeEVDLE9BQVEsT0FDUkMsUUFBUyxLQUVQdkMsRUFBZSxjQUFjMkMsVUFDN0I3QyxFQUFlQyxFQUFtQkMsRUFDNUMsQ0FDSixLQUNKLENBQ0osTUFFQUksT0FBTzRCLEtBQUtnRyxVQUFVM0csYUFBYXdELFdBQ3hCaEYsRUFBcUJnRixFQUFNLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jaHJvbWUtZXh0ZW5zaW9uLXR5cGVzY3JpcHQtc3RhcnRlci8uL3NyYy9yZWNpcGUudHMiLCJ3ZWJwYWNrOi8vY2hyb21lLWV4dGVuc2lvbi10eXBlc2NyaXB0LXN0YXJ0ZXIvLi9zcmMvYmFja2dyb3VuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgbmF2ID0ge1xuICAgIFwic2VsZWN0b3JcIjogXCIjbmF2LXNlYXJjaC1iYXItZm9ybVwiLFxuICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiaW5wdXQjdHdvdGFic2VhcmNodGV4dGJveFwiLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwic2VhcmNoX2lucHV0XCIsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCIjbmF2LXNlYXJjaC1zdWJtaXQtYnV0dG9uXCIsXG4gICAgICAgICAgICBcImNsaWNrYWJsZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJuYW1lXCI6IFwic2VhcmNoX2J1dHRvblwiLFxuICAgICAgICB9LFxuICAgIF0sXG59O1xuZXhwb3J0IGNvbnN0IHJlZmluZW1lbnRfb3B0aW9uID0gW1xuICAgIHtcbiAgICAgICAgXCJzZWxlY3RvclwiOiBcInNwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1iYXNlLnB1aXMtYm9sZC13ZWlnaHQtdGV4dFwiLFxuICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgIFwiY2xhc3NcIjogXCJyZWZpbmVtZW50LXRpdGxlXCIsXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwic2VsZWN0b3JcIjogXCJ1bDpudGgtb2YtdHlwZSgxKSA+IHNwYW4uYS1kZWNsYXJhdGl2ZSA+IHNwYW4gPiBsaVwiLFxuICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgIFwibmFtZVwiOiBcImZyb21fdGV4dFwiLFxuICAgICAgICBcImNsaWNrYWJsZVwiOiB0cnVlLFxuICAgICAgICBcImNsaWNrX3NlbGVjdG9yXCI6IFwiYVwiLFxuICAgICAgICBcImRpcmVjdF9jaGlsZFwiOiB0cnVlLFxuICAgICAgICBcImNoaWxkcmVuXCI6IFt7IFwic2VsZWN0b3JcIjogXCJpbnB1dFt0eXBlPSdjaGVja2JveCddXCIgfV0sXG4gICAgfSxcbl07XG5leHBvcnQgY29uc3QgcmVjaXBlcyA9IFtcbiAgICB7XG4gICAgICAgIFwibWF0Y2hcIjogXCIvXCIsXG4gICAgICAgIFwibWF0Y2hfbWV0aG9kXCI6IFwidXJsXCIsXG4gICAgICAgIFwic2VsZWN0b3JcIjogXCJodG1sXCIsXG4gICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAgeyBcInNlbGVjdG9yXCI6IFwiaGVhZFwiLCBcImNoaWxkcmVuXCI6IFt7IFwic2VsZWN0b3JcIjogXCJ0aXRsZVwiLCBcImFkZF90ZXh0XCI6IHRydWUgfV0gfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiYm9keVwiLFxuICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW25hdl0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgIH0sXG4gICAge1xuICAgICAgICBcIm1hdGNoXCI6IFwiL3NcIixcbiAgICAgICAgXCJtYXRjaF9tZXRob2RcIjogXCJ1cmxcIixcbiAgICAgICAgXCJzZWxlY3RvclwiOiBcImh0bWxcIixcbiAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICB7IFwic2VsZWN0b3JcIjogXCJoZWFkXCIsIFwiY2hpbGRyZW5cIjogW3sgXCJzZWxlY3RvclwiOiBcInRpdGxlXCIsIFwiYWRkX3RleHRcIjogdHJ1ZSB9XSB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJib2R5XCIsXG4gICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgIG5hdixcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcIiNzLXJlZmluZW1lbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJyZWZpbmVtZW50c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiZGl2LmEtc2VjdGlvbi5hLXNwYWNpbmctbm9uZTpub3QoOmhhcygjbi10aXRsZSkpOmhhcyhzcGFuLmEtc2l6ZS1iYXNlLmEtY29sb3ItYmFzZS5wdWlzLWJvbGQtd2VpZ2h0LXRleHQpOmhhcyh1bCBzcGFuLmEtZGVjbGFyYXRpdmUgPiBzcGFuID4gbGkpOm5vdCgjcmV2aWV3c1JlZmluZW1lbnRzKTpub3QoI2RlcGFydG1lbnRzKTpub3QoI3ByaWNlUmVmaW5lbWVudHMpOm5vdCgjZmlsdGVycylcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZnJvbV90ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dF9zZWxlY3RvclwiOiBcInNwYW4uYS1zaXplLWJhc2UuYS1jb2xvci1iYXNlLnB1aXMtYm9sZC13ZWlnaHQtdGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IHJlZmluZW1lbnRfb3B0aW9uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiI2RlcGFydG1lbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImRlcGFydG1lbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJsaSBhXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRfdGV4dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImZyb21fdGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xpY2thYmxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCIjcmV2aWV3c1JlZmluZW1lbnRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInJldmlld3NfcmVmaW5lbWVudHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImxpIGFcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZnJvbV90ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGlja2FibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImRpdi5zLW1haW4tc2xvdC5zLXJlc3VsdC1saXN0LnMtc2VhcmNoLXJlc3VsdHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInNlYXJjaF9yZXN1bHRzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5zZXJ0X3NwbGl0X21hcmtlclwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImluc2VydF9zcGxpdF9tYXJrZXJfZXZlcnlcIjogNCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiAnZGl2W2RhdGEtY29tcG9uZW50LXR5cGU9XCJzLXNlYXJjaC1yZXN1bHRcIl0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInRleHRfc2VsZWN0b3JcIjogXCJzcGFuLmEtc2l6ZS1iYXNlLXBsdXMuYS1jb2xvci1iYXNlLmEtdGV4dC1ub3JtYWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZnJvbV90ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJzZWFyY2gtcmVzdWx0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJkaXZbZGF0YS1jeT0ndGl0bGUtcmVjaXBlJ10gYVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvZHVjdC1uYW1lXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGlja2FibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJ2aWV3X3Byb2R1Y3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImRpdltkYXRhLWN5PSdyZXZpZXdzLWJsb2NrJ11cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvZHVjdC1yZXZpZXdcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcInNwYW4uYS1pY29uLWFsdFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRfdGV4dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtcmF0aW5nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJzcGFuLmEtc2l6ZS1iYXNlLnMtdW5kZXJsaW5lLXRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dF9mb3JtYXRcIjogXCJ7fSByZXZpZXdzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwicHJvZHVjdC1yYXRpbmctY291bnRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiZGl2W2RhdGEtY3k9J3ByaWNlLXJlY2lwZSddXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtcHJpY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImEuYS1saW5rLW5vcm1hbCA+IHNwYW4uYS1wcmljZSA+IHNwYW4uYS1vZmZzY3JlZW5cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiZGl2W2RhdGEtY3k9J2RlbGl2ZXJ5LXJlY2lwZSddXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRfdGV4dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwcm9kdWN0LWRlbGl2ZXJ5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJzcGFuLnMtcGFnaW5hdGlvbi1zdHJpcFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwicGFnaW5hdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiLnMtcGFnaW5hdGlvbi1pdGVtXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZnJvbV90ZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xpY2thYmxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICB9LFxuICAgIHtcbiAgICAgICAgXCJtYXRjaFwiOiBcIiNwcm9kdWN0VGl0bGVcIixcbiAgICAgICAgXCJtYXRjaF90ZXh0XCI6IFwiXCIsXG4gICAgICAgIFwic2VsZWN0b3JcIjogXCJodG1sXCIsXG4gICAgICAgIFwidGVybWluYXRlXCI6IFwicmV0dXJuICEhYXJndW1lbnRzWzBdXCIsXG4gICAgICAgIFwidGVybWluYXRlX2NhbGxiYWNrXCI6IFwicmV0dXJuIGFyZ3VtZW50c1swXVwiLFxuICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgIHsgXCJzZWxlY3RvclwiOiBcImhlYWRcIiwgXCJjaGlsZHJlblwiOiBbeyBcInNlbGVjdG9yXCI6IFwidGl0bGVcIiwgXCJhZGRfdGV4dFwiOiB0cnVlIH1dIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImJvZHlcIixcbiAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgbmF2LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiI2NlbnRlckNvbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtY2FyZFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInNlbGVjdG9yXCI6IFwiI3RpdGxlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJrZWVwX2F0dHJcIjogW1wiaWRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCIjYXZlcmFnZUN1c3RvbWVyUmV2aWV3c1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImNsYXNzXCI6IFwicmV2aWV3XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2hpbGRyZW5cIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJzcGFuLmEtaWNvbi1hbHRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCIjYWNyQ3VzdG9tZXJSZXZpZXdUZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhZGRfdGV4dFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcIiNhcGV4X2Rlc2t0b3BfbmV3QWNjb3JkaW9uUm93ICNjb3JlUHJpY2VEaXNwbGF5X2Rlc2t0b3BfZmVhdHVyZV9kaXYgc3Bhbi5hLXByaWNlLmFvay1hbGlnbi1jZW50ZXIucmVpbnZlbnRQcmljZVByaWNlVG9QYXlNYXJnaW4ucHJpY2VUb1BheVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dF9mb3JtYXRcIjogXCJQcmljZToge31cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtcHJpY2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcIiN0d2lzdGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xhc3NcIjogXCJwcm9kdWN0LW9wdGlvbnNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImRpdi5hLXJvdzpoYXMobGFiZWwuYS1mb3JtLWxhYmVsKTpoYXMoc3Bhbi5zZWxlY3Rpb24pXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjaGlsZHJlblwiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCJsYWJlbC5hLWZvcm0tbGFiZWxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcInNwYW4uc2VsZWN0aW9uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcIiNhZGRUb0NhcnQ6aGFzKCNidXktbm93LWJ1dHRvbilcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImFkZF90b19jYXJ0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImNoaWxkcmVuXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2VsZWN0b3JcIjogXCIjcHJvZHVjdEZhY3RzRGVza3RvcEV4cGFuZGVyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtZmFjdHNcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcImRpdi5taXItbGF5b3V0LURFTElWRVJZX0JMT0NLLXNsb3QtUFJJTUFSWV9ERUxJVkVSWV9NRVNTQUdFX0xBUkdFXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWRkX3RleHRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtZGVsaXZlcnlcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzZWxlY3RvclwiOiBcIiNidXktbm93LWJ1dHRvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFkZF90ZXh0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiY2xpY2thYmxlXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcImJ1eV9ub3dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbGFzc1wiOiBcInByb2R1Y3QtYnV5LW5vd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImJlZm9yZV9ob29rXCI6IGBcbmNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN0aXRsZVwiKS5pbm5lclRleHRcbmNvbnN0IHByaWNlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcInNwYW4uYS1wcmljZS5hb2stYWxpZ24tY2VudGVyLnJlaW52ZW50UHJpY2VQcmljZVRvUGF5TWFyZ2luLnByaWNlVG9QYXlcIikuaW5uZXJUZXh0XG5jb25zdCBvcHRpb25zID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwiI3R3aXN0ZXIgZGl2LmEtcm93OmhhcyhsYWJlbC5hLWZvcm0tbGFiZWwpOmhhcyhzcGFuLnNlbGVjdGlvbilcIikpLm1hcChhID0+ICh7bGFiZWw6IGEucXVlcnlTZWxlY3RvcihcImxhYmVsLmEtZm9ybS1sYWJlbFwiKS5pbm5lclRleHQsIHZhbHVlOiBhLnF1ZXJ5U2VsZWN0b3IoXCJzcGFuLnNlbGVjdGlvblwiKS5pbm5lclRleHR9KSlcbmNvbnN0IG9wdGlvbnNfZGljdCA9IHt9XG5mb3IgKGNvbnN0IG9wdGlvbiBvZiBvcHRpb25zKSB7XG4gICAgb3B0aW9uc19kaWN0W29wdGlvbltcImxhYmVsXCJdLnJlcGxhY2UoXCI6IFwiLCBcIlwiKV0gPSBvcHRpb25bXCJ2YWx1ZVwiXVxufVxuY29uc3QgYXNpbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dCNBU0lOXCIpLnZhbHVlXG5jb25zb2xlLmxvZyh7dGl0bGUsIHByaWNlLCBvcHRpb25zOiBvcHRpb25zX2RpY3QsIGFzaW59KVxucmV0dXJuIHt0aXRsZSwgcHJpY2UsIG9wdGlvbnM6IG9wdGlvbnNfZGljdCwgYXNpbn1cbmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgfSxcbiAgICB7XG4gICAgICAgIFwibWF0Y2hcIjogXCIvYXAvc2lnbmluXCIsXG4gICAgICAgIFwibWF0Y2hfbWV0aG9kXCI6IFwidXJsXCIsXG4gICAgICAgIFwidGVybWluYXRlXCI6IFwicmV0dXJuICEhYXJndW1lbnRzWzBdXCIsXG4gICAgICAgIFwidGVybWluYXRlX2NhbGxiYWNrXCI6IFwicmV0dXJuIGFyZ3VtZW50c1swXVwiLFxuICAgICAgICBcInNlbGVjdG9yXCI6IFwiaHRtbFwiLFxuICAgIH0sXG5dO1xuIiwidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5pbXBvcnQgeyByZWNpcGVzIH0gZnJvbSAnLi9yZWNpcGUnO1xubGV0IHVwbG9hZF91cmwgPSBcImh0dHA6Ly91c2VyZGF0YWNvbGxlY3QuaGFpbGFiLmlvL3VwbG9hZFwiO1xubGV0IGludGVyYWN0aW9ucyA9IFtdO1xuY29uc3QgaW50ZXJhY3Rpb25zTGltaXQgPSAxMDtcbmxldCBzY3JlZW5zaG90cyA9IFtdO1xuY29uc3Qgc2NyZWVuc2hvdExpbWl0ID0gMTA7XG5sZXQgYWN0aW9uU2VxdWVuY2VJZCA9IDA7XG5sZXQgdXBsb2FkVGltZXIgPSBudWxsO1xubGV0IHVzZXJJZCA9IFwiXCI7XG5jb25zdCB0YWJOYXZpZ2F0aW9uSGlzdG9yeSA9IHt9O1xuZnVuY3Rpb24gYW5hbHl6ZU5hdmlnYXRpb24odGFiSWQsIHVybCkge1xuICAgIGlmICghdGFiTmF2aWdhdGlvbkhpc3RvcnlbdGFiSWRdKSB7XG4gICAgICAgIHRhYk5hdmlnYXRpb25IaXN0b3J5W3RhYklkXSA9IHtcbiAgICAgICAgICAgIGJhY2tTdGFjazogW10sXG4gICAgICAgICAgICBmb3J3YXJkU3RhY2s6IFtdLFxuICAgICAgICAgICAgY3VycmVudFVybDogbnVsbFxuICAgICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBoaXN0b3J5ID0gdGFiTmF2aWdhdGlvbkhpc3RvcnlbdGFiSWRdO1xuICAgIGlmICghaGlzdG9yeS5jdXJyZW50VXJsKSB7XG4gICAgICAgIGhpc3RvcnkuY3VycmVudFVybCA9IHVybDtcbiAgICAgICAgcmV0dXJuICduZXcnO1xuICAgIH1cbiAgICBpZiAoaGlzdG9yeS5jdXJyZW50VXJsID09PSB1cmwpIHtcbiAgICAgICAgcmV0dXJuICdyZWxvYWQnO1xuICAgIH1cbiAgICBpZiAoaGlzdG9yeS5iYWNrU3RhY2subGVuZ3RoID4gMCAmJlxuICAgICAgICBoaXN0b3J5LmJhY2tTdGFja1toaXN0b3J5LmJhY2tTdGFjay5sZW5ndGggLSAxXSA9PT0gdXJsKSB7XG4gICAgICAgIGhpc3RvcnkuZm9yd2FyZFN0YWNrLnB1c2goaGlzdG9yeS5jdXJyZW50VXJsKTtcbiAgICAgICAgaGlzdG9yeS5jdXJyZW50VXJsID0gaGlzdG9yeS5iYWNrU3RhY2sucG9wKCk7XG4gICAgICAgIHJldHVybiAnYmFjayc7XG4gICAgfVxuICAgIGlmIChoaXN0b3J5LmZvcndhcmRTdGFjay5sZW5ndGggPiAwICYmXG4gICAgICAgIGhpc3RvcnkuZm9yd2FyZFN0YWNrW2hpc3RvcnkuZm9yd2FyZFN0YWNrLmxlbmd0aCAtIDFdID09PSB1cmwpIHtcbiAgICAgICAgaGlzdG9yeS5iYWNrU3RhY2sucHVzaChoaXN0b3J5LmN1cnJlbnRVcmwpO1xuICAgICAgICBoaXN0b3J5LmN1cnJlbnRVcmwgPSBoaXN0b3J5LmZvcndhcmRTdGFjay5wb3AoKTtcbiAgICAgICAgcmV0dXJuICdmb3J3YXJkJztcbiAgICB9XG4gICAgaGlzdG9yeS5iYWNrU3RhY2sucHVzaChoaXN0b3J5LmN1cnJlbnRVcmwpO1xuICAgIGhpc3RvcnkuZm9yd2FyZFN0YWNrID0gW107XG4gICAgaGlzdG9yeS5jdXJyZW50VXJsID0gdXJsO1xuICAgIHJldHVybiAnbmV3Jztcbn1cbi8vIEFkZCBuZXcgZnVuY3Rpb24gdG8gaGFuZGxlIHNjcmVlbnNob3Qgc2F2aW5nXG5mdW5jdGlvbiBzYXZlU2NyZWVuc2hvdChzY3JlZW5zaG90RGF0YVVybCwgc2NyZWVuc2hvdElkKSB7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgaWYgKHNjcmVlbnNob3REYXRhVXJsKSB7XG4gICAgICAgICAgICBzY3JlZW5zaG90cy5wdXNoKFtzY3JlZW5zaG90RGF0YVVybCwgc2NyZWVuc2hvdElkXSk7XG4gICAgICAgICAgICBpZiAoc2NyZWVuc2hvdHMubGVuZ3RoID4gc2NyZWVuc2hvdExpbWl0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7IHNjcmVlbnNob3RzOiBbXSB9KTtcbiAgICAgICAgICAgICAgICByZXN1bHQgPSByZXN1bHQuc2NyZWVuc2hvdHMgfHwgW107XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RvcmVTY3JlZW5zaG90cyA9IHJlc3VsdC5jb25jYXQoc2NyZWVuc2hvdHMpO1xuICAgICAgICAgICAgICAgIHNjcmVlbnNob3RzLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgeWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgc2NyZWVuc2hvdHM6IHN0b3JlU2NyZWVuc2hvdHMgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG59XG5jaHJvbWUucnVudGltZS5vbk1lc3NhZ2UuYWRkTGlzdGVuZXIoKG1lc3NhZ2UsIHNlbmRlciwgc2VuZFJlc3BvbnNlKSA9PiB7XG4gICAgKCgpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdzYXZlRGF0YScpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnc2F2ZURhdGEgJywgbWVzc2FnZS5kYXRhLmV2ZW50VHlwZSk7XG4gICAgICAgICAgICAgICAgYWN0aW9uU2VxdWVuY2VJZCsrO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGF0YS5hY3Rpb25TZXF1ZW5jZUlkID0gYWN0aW9uU2VxdWVuY2VJZDtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnMucHVzaChtZXNzYWdlLmRhdGEpO1xuICAgICAgICAgICAgICAgIGlmIChpbnRlcmFjdGlvbnMubGVuZ3RoID4gaW50ZXJhY3Rpb25zTGltaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7IGludGVyYWN0aW9uczogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5pbnRlcmFjdGlvbnMgfHwgW107XG4gICAgICAgICAgICAgICAgICAgIGxldCBzdG9yZUludGVyYWN0aW9ucyA9IHJlc3VsdC5jb25jYXQoaW50ZXJhY3Rpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGludGVyYWN0aW9uczogc3RvcmVJbnRlcmFjdGlvbnMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDYXB0dXJlIHNjcmVlbnNob3Qgb24gZGVtYW5kXG4gICAgICAgICAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdjYXB0dXJlU2NyZWVuc2hvdCcpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JlZW5zaG90RGF0YVVybCA9IHlpZWxkIGNhcHR1cmVTY3JlZW5zaG90KCk7XG4gICAgICAgICAgICAgICAgaWYgKHNjcmVlbnNob3REYXRhVXJsKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHN1Y2Nlc3MgPSB5aWVsZCBzYXZlU2NyZWVuc2hvdChzY3JlZW5zaG90RGF0YVVybCwgbWVzc2FnZS5zY3JlZW5zaG90SWQpO1xuICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzLCBtZXNzYWdlOiBzdWNjZXNzID8gdW5kZWZpbmVkIDogJ0ZhaWxlZCB0byBjYXB0dXJlIHNjcmVlbnNob3QnIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIG1lc3NhZ2U6ICdGYWlsZWQgdG8gY2FwdHVyZSBzY3JlZW5zaG90JyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEb3dubG9hZCBkYXRhIG9uIHVzZXIgcmVxdWVzdFxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAnZG93bmxvYWREYXRhJykge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkb3dubG9hZERhdGEnKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3VjY2VzcyA9IHlpZWxkIHVwbG9hZERhdGFUb1NlcnZlcigpO1xuICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaGFuZGxpbmcgZG93bmxvYWQ6JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSAnY2xlYXJNZW1vcnlDYWNoZScpIHtcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnMgPSBbXTtcbiAgICAgICAgICAgICAgICBzY3JlZW5zaG90cyA9IFtdO1xuICAgICAgICAgICAgICAgIGFjdGlvblNlcXVlbmNlSWQgPSAwO1xuICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IHRydWUgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5hY3Rpb24gPT09ICdnZXRSZWNpcGUnICYmICgoX2EgPSBzZW5kZXIudGFiKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaWQpKSB7XG4gICAgICAgICAgICAgICAgc2VsZWN0UmVjaXBlKHNlbmRlci50YWIuaWQsIG1lc3NhZ2UudXJsKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigocmVjaXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNlbmRSZXNwb25zZSh7IHJlY2lwZTogcmVjaXBlIH0pO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgc2VuZFJlc3BvbnNlKHsgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7IC8vIEluZGljYXRlIHRoYXQgc2VuZFJlc3BvbnNlIHdpbGwgYmUgY2FsbGVkIGFzeW5jaHJvbm91c2x5XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBjaHJvbWUuc3RvcmFnZS5sb2NhbC5jbGVhcigpO1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaGFuZGxpbmcgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgICAgIH1cbiAgICB9KSkoKTtcbiAgICByZXR1cm4gdHJ1ZTsgLy8gS2VlcHMgdGhlIG1lc3NhZ2UgY2hhbm5lbCBvcGVuIGZvciBhc3luYyByZXNwb25zZXNcbn0pO1xuLy8gQ2FwdHVyZSB0aGUgc2NyZWVuc2hvdCBpbiB0aGUgY3VycmVudCB0YWJcbmZ1bmN0aW9uIGNhcHR1cmVTY3JlZW5zaG90KCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBbdGFiXSA9IHlpZWxkIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCBjdXJyZW50V2luZG93OiB0cnVlIH0pO1xuICAgICAgICAgICAgaWYgKHRhYikge1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCBjaHJvbWUudGFicy5jYXB0dXJlVmlzaWJsZVRhYih0YWIud2luZG93SWQsIHsgZm9ybWF0OiAnanBlZycsIHF1YWxpdHk6IDI1IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY2FwdHVyaW5nIHNjcmVlbnNob3Q6JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gaGFzaENvZGUoc3RyKSB7XG4gICAgbGV0IGhhc2ggPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGhhc2ggPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICBoYXNoIHw9IDA7XG4gICAgfVxuICAgIGNvbnNvbGUubG9nKFwiSGFzaCB2YWx1ZSBiZWZvcmUgcmV0dXJuOlwiLCBoYXNoKTtcbiAgICByZXR1cm4gaGFzaC50b1N0cmluZygpO1xufVxuLy8gbGlzdGVuIHRvIHN3aXRjaGVzIGJldHdlZW4gYWN0aXZhdGVkIHRhYnNcbmNocm9tZS50YWJzLm9uQWN0aXZhdGVkLmFkZExpc3RlbmVyKChhY3RpdmVJbmZvKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCB0YWJJZCA9IGFjdGl2ZUluZm8udGFiSWQ7XG4gICAgICAgIGNvbnN0IHRhYiA9IHlpZWxkIGNocm9tZS50YWJzLmdldCh0YWJJZCk7XG4gICAgICAgIGlmICghdGFiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBGYWlsZWQgdG8gZ2V0IHRhYiB3aXRoIElEOiAke3RhYklkfWApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKGBTd2l0Y2hlZCB0byB0YWIgJHt0YWJJZH0gd2l0aCBVUkw6ICR7dGFiLnVybH1gKTtcbiAgICAgICAgaWYgKHRhYi51cmwgJiYgdGFiLnVybC5pbmNsdWRlcygnYW1hem9uLmNvbScpKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50U25hcHNob3RJZCA9IGBodG1sXyR7aGFzaENvZGUodGFiLnVybCl9XyR7dGltZXN0YW1wfWA7XG4gICAgICAgICAgICBjaHJvbWUudGFicy5zZW5kTWVzc2FnZSh0YWJJZCwgeyBhY3Rpb246ICdnZXRIVE1MJyB9LCAocmVzcG9uc2UpID0+IF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxDb250ZW50ID0gcmVzcG9uc2UgPT09IG51bGwgfHwgcmVzcG9uc2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHJlc3BvbnNlLmh0bWw7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7IGh0bWxTbmFwc2hvdHM6IHt9IH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IGh0bWxTbmFwc2hvdHMgPSByZXN1bHQuaHRtbFNuYXBzaG90cyB8fCB7fTtcbiAgICAgICAgICAgICAgICBodG1sU25hcHNob3RzW2N1cnJlbnRTbmFwc2hvdElkXSA9IGh0bWxDb250ZW50O1xuICAgICAgICAgICAgICAgIHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7IGh0bWxTbmFwc2hvdHMgfSk7XG4gICAgICAgICAgICAgICAgYWN0aW9uU2VxdWVuY2VJZCsrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZTogXCJ0YWJBY3RpdmF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0X3VybDogdGFiLnVybCxcbiAgICAgICAgICAgICAgICAgICAgaHRtbFNuYXBzaG90SWQ6IGN1cnJlbnRTbmFwc2hvdElkLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25TZXF1ZW5jZUlkOiBhY3Rpb25TZXF1ZW5jZUlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25zLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9ucy5sZW5ndGggPiBpbnRlcmFjdGlvbnNMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgaW50ZXJhY3Rpb25zOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmludGVyYWN0aW9ucyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0b3JlSW50ZXJhY3Rpb25zID0gcmVzdWx0LmNvbmNhdChpbnRlcmFjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgaW50ZXJhY3Rpb25zOiBzdG9yZUludGVyYWN0aW9ucyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjcmVlbnNob3REYXRhVXJsID0geWllbGQgY2hyb21lLnRhYnMuY2FwdHVyZVZpc2libGVUYWIodGFiLndpbmRvd0lkLCB7IGZvcm1hdDogJ2pwZWcnLCBxdWFsaXR5OiAyNSB9KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzY3JlZW5zaG90SWQgPSBgc2NyZWVuc2hvdF8ke3RpbWVzdGFtcH1gO1xuICAgICAgICAgICAgICAgIHlpZWxkIHNhdmVTY3JlZW5zaG90KHNjcmVlbnNob3REYXRhVXJsLCBzY3JlZW5zaG90SWQpO1xuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBpbiB0YWIgYWN0aXZhdGUgaGFuZGxlcjonLCBlcnJvcik7XG4gICAgfVxufSkpO1xuZnVuY3Rpb24gc2VsZWN0UmVjaXBlKHRhYklkLCB1cmwpIHtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKHVybCk7XG4gICAgICAgIGNvbnN0IHBhdGggPSBwYXJzZWRVcmwucGF0aG5hbWU7XG4gICAgICAgIGZvciAoY29uc3QgcmVjaXBlIG9mIHJlY2lwZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoTWV0aG9kID0gcmVjaXBlLm1hdGNoX21ldGhvZCB8fCBcInRleHRcIjtcbiAgICAgICAgICAgIGlmIChtYXRjaE1ldGhvZCA9PT0gXCJ0ZXh0XCIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHNjcmlwdCBpbiB0YWIgdG8gY2hlY2sgZm9yIG1hdGNoaW5nIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgW3sgcmVzdWx0OiBoYXNNYXRjaCB9XSA9IHlpZWxkIGNocm9tZS5zY3JpcHRpbmcuZXhlY3V0ZVNjcmlwdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IHsgdGFiSWQgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmM6IChzZWxlY3RvciwgbWF0Y2hUZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQgJiYgKCFtYXRjaFRleHQgfHwgKChfYiA9IChfYSA9IGVsZW1lbnQudGV4dENvbnRlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKG1hdGNoVGV4dC50b0xvd2VyQ2FzZSgpKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2UpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmdzOiBbcmVjaXBlLm1hdGNoLCByZWNpcGUubWF0Y2hfdGV4dCB8fCBcIlwiXVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc01hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVjaXBlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgY2hlY2tpbmcgdGV4dCBtYXRjaDpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoTWV0aG9kID09PSBcInVybFwiICYmIHJlY2lwZS5tYXRjaCA9PT0gcGF0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNpcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBtYXRjaGluZyByZWNpcGUgZm91bmQgZm9yIHBhdGg6ICR7cGF0aH1gKTtcbiAgICB9KTtcbn1cbmNocm9tZS53ZWJOYXZpZ2F0aW9uLm9uQ29tbWl0dGVkLmFkZExpc3RlbmVyKChkZXRhaWxzKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICBpZiAoZGV0YWlscy5mcmFtZUlkICE9PSAwKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc29sZS5sb2coJ3dlYk5hdmlnYXRpb24gb25Db21taXR0ZWQgZXZlbnQgdHJpZ2dlcmVkOicsIGRldGFpbHMpO1xuICAgIGlmIChkZXRhaWxzLnVybC5pbmNsdWRlcygnYW1hem9uLmNvbScpKSB7XG4gICAgICAgIGNvbnN0IG5hdmlnYXRpb25UeXBlID0gYW5hbHl6ZU5hdmlnYXRpb24oZGV0YWlscy50YWJJZCwgZGV0YWlscy51cmwpO1xuICAgICAgICBjb25zb2xlLmxvZyhgTmF2aWdhdGlvbiB0eXBlOiAke25hdmlnYXRpb25UeXBlfSBmb3IgdGFiICR7ZGV0YWlscy50YWJJZH0gdG8gJHtkZXRhaWxzLnVybH1gKTtcbiAgICAgICAgY2hyb21lLnNjcmlwdGluZy5leGVjdXRlU2NyaXB0KHtcbiAgICAgICAgICAgIHRhcmdldDogeyB0YWJJZDogZGV0YWlscy50YWJJZCB9LFxuICAgICAgICAgICAgZnVuYzogKCkgPT4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50Lm91dGVySFRNTFxuICAgICAgICB9LCAocmVzdWx0cykgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBpZiAocmVzdWx0cyAmJiByZXN1bHRzWzBdICYmIHJlc3VsdHNbMF0ucmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFnZUh0bWwgPSByZXN1bHRzWzBdLnJlc3VsdDtcbiAgICAgICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFNuYXBzaG90SWQgPSBgaHRtbF8ke2hhc2hDb2RlKGRldGFpbHMudXJsKX1fJHt0aW1lc3RhbXB9YDtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgaHRtbFNuYXBzaG90czoge30gfSk7XG4gICAgICAgICAgICAgICAgY29uc3QgaHRtbFNuYXBzaG90cyA9IHJlc3VsdC5odG1sU25hcHNob3RzIHx8IHt9O1xuICAgICAgICAgICAgICAgIGh0bWxTbmFwc2hvdHNbY3VycmVudFNuYXBzaG90SWRdID0gcGFnZUh0bWw7XG4gICAgICAgICAgICAgICAgeWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgaHRtbFNuYXBzaG90cyB9KTtcbiAgICAgICAgICAgICAgICAvLyBBZGQgbmF2aWdhdGlvbiBkYXRhIHRvIGludGVyYWN0aW9uc1xuICAgICAgICAgICAgICAgIGFjdGlvblNlcXVlbmNlSWQrKztcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBldmVudFR5cGU6IFwibmF2aWdhdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogbmF2aWdhdGlvblR5cGUsXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogdGltZXN0YW1wLFxuICAgICAgICAgICAgICAgICAgICB0YXJnZXRfdXJsOiBkZXRhaWxzLnVybCxcbiAgICAgICAgICAgICAgICAgICAgaHRtbFNuYXBzaG90SWQ6IGN1cnJlbnRTbmFwc2hvdElkLFxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25TZXF1ZW5jZUlkLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaW50ZXJhY3Rpb25zLnB1c2goZGF0YSk7XG4gICAgICAgICAgICAgICAgaWYgKGludGVyYWN0aW9ucy5sZW5ndGggPiBpbnRlcmFjdGlvbnNMaW1pdCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0geWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgaW50ZXJhY3Rpb25zOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmludGVyYWN0aW9ucyB8fCBbXTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHN0b3JlSW50ZXJhY3Rpb25zID0gcmVzdWx0LmNvbmNhdChpbnRlcmFjdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnMubGVuZ3RoID0gMDtcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgaW50ZXJhY3Rpb25zOiBzdG9yZUludGVyYWN0aW9ucyB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gYWRkIHNjcmVlbnNob3RcbiAgICAgICAgICAgICAgICBjb25zdCB0YWIgPSB5aWVsZCBjaHJvbWUudGFicy5nZXQoZGV0YWlscy50YWJJZCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyZWVuc2hvdERhdGFVcmwgPSB5aWVsZCBjaHJvbWUudGFicy5jYXB0dXJlVmlzaWJsZVRhYih0YWIud2luZG93SWQsIHtcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiAnanBlZycsXG4gICAgICAgICAgICAgICAgICAgIHF1YWxpdHk6IDI1XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NyZWVuc2hvdElkID0gYHNjcmVlbnNob3RfJHt0aW1lc3RhbXB9YDtcbiAgICAgICAgICAgICAgICB5aWVsZCBzYXZlU2NyZWVuc2hvdChzY3JlZW5zaG90RGF0YVVybCwgc2NyZWVuc2hvdElkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH1cbn0pKTtcbi8vIEFkZCBjbGVhbnVwIHdoZW4gdGFiIGlzIGNsb3NlZFxuY2hyb21lLnRhYnMub25SZW1vdmVkLmFkZExpc3RlbmVyKCh0YWJJZCkgPT4ge1xuICAgIGRlbGV0ZSB0YWJOYXZpZ2F0aW9uSGlzdG9yeVt0YWJJZF07XG59KTtcbi8vIEFkZCB0aGlzIGZ1bmN0aW9uIHRvIGhhbmRsZSBkYXRhIHVwbG9hZFxuZnVuY3Rpb24gdXBsb2FkRGF0YVRvU2VydmVyKCkge1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkucmVwbGFjZSgvWzouXS9nLCAnLScpO1xuICAgICAgICAgICAgY29uc3QgZm9sZGVyTmFtZSA9IGBEQVRBL1NFU1NJT05fJHt0aW1lc3RhbXB9YDtcbiAgICAgICAgICAgIC8vIEdldCB1c2VySWQgZnJvbSBzdG9yYWdlXG4gICAgICAgICAgICBjb25zdCB1c2VySWRSZXN1bHQgPSB5aWVsZCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoeyB1c2VySWQ6IFwiXCIgfSk7XG4gICAgICAgICAgICBjb25zdCBjdXJyZW50VXNlcklkID0gdXNlcklkUmVzdWx0LnVzZXJJZDtcbiAgICAgICAgICAgIC8vIEdldCBhbGwgZGF0YSBmcm9tIHN0b3JhZ2VcbiAgICAgICAgICAgIGNvbnN0IHNuYXBzaG90cyA9IHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7IGh0bWxTbmFwc2hvdHM6IFtdIH0pO1xuICAgICAgICAgICAgY29uc3QgaW50ZXJhY3QgPSB5aWVsZCBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoeyBpbnRlcmFjdGlvbnM6IFtdIH0pO1xuICAgICAgICAgICAgY29uc3Qgb3JkZXJEZXRhaWxzID0geWllbGQgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KHsgb3JkZXJEZXRhaWxzOiBbXSB9KTtcbiAgICAgICAgICAgIGNvbnN0IHNjcmVlbiA9IHlpZWxkIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCh7IHNjcmVlbnNob3RzOiBbXSB9KTtcbiAgICAgICAgICAgIGxldCBodG1sU25hcHNob3RzID0gc25hcHNob3RzLmh0bWxTbmFwc2hvdHMgfHwge307XG4gICAgICAgICAgICBsZXQgc3RvcmVJbnRlcmFjdGlvbnMgPSBpbnRlcmFjdC5pbnRlcmFjdGlvbnMgfHwgW107XG4gICAgICAgICAgICBsZXQgc3RvcmVvcmRlckRldGFpbHMgPSBvcmRlckRldGFpbHMub3JkZXJEZXRhaWxzIHx8IFtdO1xuICAgICAgICAgICAgbGV0IHN0b3JlU2NyZWVuc2hvdHMgPSBzY3JlZW4uc2NyZWVuc2hvdHMgfHwgW107XG4gICAgICAgICAgICAvLyBDb21iaW5lIHdpdGggaW4tbWVtb3J5IGRhdGFcbiAgICAgICAgICAgIHN0b3JlSW50ZXJhY3Rpb25zID0gc3RvcmVJbnRlcmFjdGlvbnMuY29uY2F0KGludGVyYWN0aW9ucyk7XG4gICAgICAgICAgICBzdG9yZVNjcmVlbnNob3RzID0gc3RvcmVTY3JlZW5zaG90cy5jb25jYXQoc2NyZWVuc2hvdHMpO1xuICAgICAgICAgICAgLy8gUHJlcGFyZSB0aGUgZnVsbCBkYXRhIG9iamVjdFxuICAgICAgICAgICAgY29uc3QgZnVsbERhdGEgPSB7XG4gICAgICAgICAgICAgICAgaHRtbFNuYXBzaG90cyxcbiAgICAgICAgICAgICAgICBpbnRlcmFjdGlvbnM6IHN0b3JlSW50ZXJhY3Rpb25zLFxuICAgICAgICAgICAgICAgIG9yZGVyRGV0YWlsczogc3RvcmVvcmRlckRldGFpbHMsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gVXBsb2FkIHNlc3Npb24gaW5mb1xuICAgICAgICAgICAgY29uc3Qgc2Vzc2lvbkluZm8gPSBuZXcgQmxvYihbYFNlc3Npb24gZGF0YSBmb3IgdGltZXN0YW1wOiAke3RpbWVzdGFtcH0sIHVzZXIgaWQ6ICR7Y3VycmVudFVzZXJJZH1gXSwgeyB0eXBlOiAndGV4dC9wbGFpbicgfSk7XG4gICAgICAgICAgICBjb25zdCBzZXNzaW9uRm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgIHNlc3Npb25Gb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBzZXNzaW9uSW5mbywgYCR7Zm9sZGVyTmFtZX0vc2Vzc2lvbl9pbmZvLnR4dGApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwbG9hZGluZyBzZXNzaW9uIGluZm8nKTtcbiAgICAgICAgICAgIHlpZWxkIGZldGNoKHVwbG9hZF91cmwsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBib2R5OiBzZXNzaW9uRm9ybURhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gVXBsb2FkIGludGVyYWN0aW9ucyBKU09OXG4gICAgICAgICAgICBjb25zdCBpbnRlcmFjdGlvbnNCbG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KGZ1bGxEYXRhLCBudWxsLCAyKV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nIH0pO1xuICAgICAgICAgICAgY29uc3QganNvbkZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygndXBsb2FkaW5nIGludGVyYWN0aW9ucycpO1xuICAgICAgICAgICAganNvbkZvcm1EYXRhLmFwcGVuZCgnZmlsZScsIGludGVyYWN0aW9uc0Jsb2IsIGAke2ZvbGRlck5hbWV9L2ludGVyYWN0aW9ucy5qc29uYCk7XG4gICAgICAgICAgICB5aWVsZCBmZXRjaCh1cGxvYWRfdXJsLCB7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgYm9keToganNvbkZvcm1EYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIC8vIFVwbG9hZCBzY3JlZW5zaG90c1xuICAgICAgICAgICAgZm9yIChjb25zdCBbc2NyZWVuc2hvdERhdGEsIHNjcmVlbnNob3RJZF0gb2Ygc3RvcmVTY3JlZW5zaG90cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0geWllbGQgZmV0Y2goc2NyZWVuc2hvdERhdGEpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJsb2IgPSB5aWVsZCByZXNwb25zZS5ibG9iKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcbiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBibG9iLCBgJHtmb2xkZXJOYW1lfS8ke3NjcmVlbnNob3RJZC5yZXBsYWNlKC9bOi5dL2csIFwiLVwiKX0uanBnYCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3VwbG9hZGluZyBzY3JlZW5zaG90cycpO1xuICAgICAgICAgICAgICAgIHlpZWxkIGZldGNoKHVwbG9hZF91cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm1EYXRhXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDbGVhciBjYWNoZSBhZnRlciBzdWNjZXNzZnVsIHVwbG9hZFxuICAgICAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwucmVtb3ZlKFsnaHRtbFNuYXBzaG90cycsICdpbnRlcmFjdGlvbnMnLCAnb3JkZXJEZXRhaWxzJywgJ3NjcmVlbnNob3RzJ10pO1xuICAgICAgICAgICAgaW50ZXJhY3Rpb25zLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICBzY3JlZW5zaG90cy5sZW5ndGggPSAwO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGxvYWRpbmcgZGF0YTonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIFN0YXJ0IHRoZSBwZXJpb2RpYyB1cGxvYWQgdGltZXJcbmZ1bmN0aW9uIHN0YXJ0UGVyaW9kaWNVcGxvYWQoKSB7XG4gICAgaWYgKCF1cGxvYWRUaW1lcikge1xuICAgICAgICB1cGxvYWRUaW1lciA9IHNldEludGVydmFsKHVwbG9hZERhdGFUb1NlcnZlciwgNjAwMDApOyAvLyA2MCBzZWNvbmRzXG4gICAgfVxufVxuLy8gU3RvcCB0aGUgcGVyaW9kaWMgdXBsb2FkIHRpbWVyXG5mdW5jdGlvbiBzdG9wUGVyaW9kaWNVcGxvYWQoKSB7XG4gICAgaWYgKHVwbG9hZFRpbWVyKSB7XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodXBsb2FkVGltZXIpO1xuICAgICAgICB1cGxvYWRUaW1lciA9IG51bGw7XG4gICAgfVxufVxuLy8gc3RhcnRQZXJpb2RpY1VwbG9hZCgpO1xuIl0sIm5hbWVzIjpbIm5hdiIsInJlY2lwZXMiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImZ1bGZpbGxlZCIsInZhbHVlIiwic3RlcCIsIm5leHQiLCJlIiwicmVqZWN0ZWQiLCJyZXN1bHQiLCJkb25lIiwidGhlbiIsImFwcGx5IiwidXBsb2FkX3VybCIsImludGVyYWN0aW9ucyIsInNjcmVlbnNob3RzIiwiYWN0aW9uU2VxdWVuY2VJZCIsInRhYk5hdmlnYXRpb25IaXN0b3J5Iiwic2F2ZVNjcmVlbnNob3QiLCJzY3JlZW5zaG90RGF0YVVybCIsInNjcmVlbnNob3RJZCIsInRoaXMiLCJwdXNoIiwibGVuZ3RoIiwiY2hyb21lIiwic3RvcmFnZSIsImxvY2FsIiwiZ2V0Iiwic3RvcmVTY3JlZW5zaG90cyIsImNvbmNhdCIsInNldCIsImhhc2hDb2RlIiwic3RyIiwiaGFzaCIsImkiLCJjaGFyQ29kZUF0IiwiY29uc29sZSIsImxvZyIsInRvU3RyaW5nIiwicnVudGltZSIsIm9uTWVzc2FnZSIsImFkZExpc3RlbmVyIiwibWVzc2FnZSIsInNlbmRlciIsInNlbmRSZXNwb25zZSIsIl9hIiwiYWN0aW9uIiwiZGF0YSIsImV2ZW50VHlwZSIsInN0b3JlSW50ZXJhY3Rpb25zIiwic3VjY2VzcyIsInRhYiIsInRhYnMiLCJxdWVyeSIsImFjdGl2ZSIsImN1cnJlbnRXaW5kb3ciLCJjYXB0dXJlVmlzaWJsZVRhYiIsIndpbmRvd0lkIiwiZm9ybWF0IiwicXVhbGl0eSIsImVycm9yIiwiY2FwdHVyZVNjcmVlbnNob3QiLCJ1bmRlZmluZWQiLCJ0aW1lc3RhbXAiLCJEYXRlIiwidG9JU09TdHJpbmciLCJyZXBsYWNlIiwiZm9sZGVyTmFtZSIsImN1cnJlbnRVc2VySWQiLCJ1c2VySWQiLCJzbmFwc2hvdHMiLCJodG1sU25hcHNob3RzIiwiaW50ZXJhY3QiLCJvcmRlckRldGFpbHMiLCJzY3JlZW4iLCJzdG9yZW9yZGVyRGV0YWlscyIsImZ1bGxEYXRhIiwic2Vzc2lvbkluZm8iLCJCbG9iIiwidHlwZSIsInNlc3Npb25Gb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwiZmV0Y2giLCJtZXRob2QiLCJib2R5IiwiaW50ZXJhY3Rpb25zQmxvYiIsIkpTT04iLCJzdHJpbmdpZnkiLCJqc29uRm9ybURhdGEiLCJzY3JlZW5zaG90RGF0YSIsInJlc3BvbnNlIiwiYmxvYiIsImZvcm1EYXRhIiwicmVtb3ZlIiwidXBsb2FkRGF0YVRvU2VydmVyIiwiaWQiLCJ0YWJJZCIsInVybCIsInBhdGgiLCJVUkwiLCJwYXRobmFtZSIsInJlY2lwZSIsIm1hdGNoTWV0aG9kIiwibWF0Y2hfbWV0aG9kIiwiaGFzTWF0Y2giLCJzY3JpcHRpbmciLCJleGVjdXRlU2NyaXB0IiwidGFyZ2V0IiwiZnVuYyIsInNlbGVjdG9yIiwibWF0Y2hUZXh0IiwiX2IiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGV4dENvbnRlbnQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiYXJncyIsIm1hdGNoIiwibWF0Y2hfdGV4dCIsIkVycm9yIiwic2VsZWN0UmVjaXBlIiwiY2F0Y2giLCJvbkFjdGl2YXRlZCIsImFjdGl2ZUluZm8iLCJjdXJyZW50U25hcHNob3RJZCIsInNlbmRNZXNzYWdlIiwiaHRtbENvbnRlbnQiLCJodG1sIiwidGFyZ2V0X3VybCIsImh0bWxTbmFwc2hvdElkIiwid2ViTmF2aWdhdGlvbiIsIm9uQ29tbWl0dGVkIiwiZGV0YWlscyIsImZyYW1lSWQiLCJuYXZpZ2F0aW9uVHlwZSIsImJhY2tTdGFjayIsImZvcndhcmRTdGFjayIsImN1cnJlbnRVcmwiLCJoaXN0b3J5IiwicG9wIiwiYW5hbHl6ZU5hdmlnYXRpb24iLCJkb2N1bWVudEVsZW1lbnQiLCJvdXRlckhUTUwiLCJyZXN1bHRzIiwicGFnZUh0bWwiLCJvblJlbW92ZWQiXSwic291cmNlUm9vdCI6IiJ9